{"version":3,"sources":["HintHandler.js","SettingsPage.js","Game.js","index.js"],"names":["nbsp","String","fromCharCode","HintHandler","gameObj","TypeError","undefined","this","computeGuessCharColor","constructor","name","formatGuessTotals","comparePosMaps","newGuess","gidx","guessList","length","guessObj","oldPosMap","posMap","newPosMap","doCompare","guess","errMsg","bits","settings","hintUsePolicy","val1","val2","UNKNOWN","noMarkGuessChars","HintHandlerShowTotals","HintHandlerMarkChars","pos","chval","submitted","bgcolor","EXACT","greenString","WRONG","yellowString","getMarkedCount","greyString","notInPool","guessLine","searchChr","count","Array","from","forEach","chr","idx","NOTUSE","oldGuess","newCode","oldCode","oldChr","policyIncludes","NOTUSEBIT","usesStr","WRONGBIT","len","hasUnknowns","genErrMsg","tstPosMap","basePosMap","every","val","index","type","borderRadius","height","width","display","marginLeft","marginBottom","textAlign","backgroundColor","countVals","exlen","wplen","push","style","styleForTotals","counts","oldcounts","newcounts","oldval","newval","exact","wrong","yellowSpan","countKnownVals","oldE","oldW","newE","newW","genCountSpans","tstE","tstW","baseE","baseW","SettingsPage","state","settingName","setState","EXACTBIT","checked","onChange","updateSettings","props","id","float","labeltext","key","switchKey","fontSize","getSwitch","min","max","value","border","input","groupName","selectVal","text","isHorizontal","lineBreak","parseInt","event","target","groupHeaderText","optsArray","optsJsxArray","map","optset","genRadioSetting","choicesAryMark","choicesAryNonMark","choicesAry","genRadioGroupSetting","marginRight","onClick","useGamePage","field","inSettings","startNewGame","genSwitchSetting","wordlen","genHintUsePolicySetting","Component","savedGameFields","Game","savedGameJSON","window","localStorage","getItem","restoreSavedState","setDefaultGameState","initReactState","isMobile","document","documentElement","console","log","guessMustBeWord","useVirtKeyboard","allowPlurals","startWithReveal","answer","inputElem","React","createRef","usedDefaultGameState","totalGuesses","message","layoutName","letterMap","savedGame","JSON","parse","setInputs","hintHandler","getHintHandler","tempAlert","prevDataLength","gameOver","msg","duration","el","createElement","setAttribute","innerHTML","setTimeout","parentNode","removeChild","body","appendChild","Promise","resolve","a","buildWordList","possibleList","wordList","getNewPossibleList","possibleListLen","Math","floor","random","toUpperCase","inputAry","fill","revealPos","findRevealPos","join","curAnswerLen","URL","fetch","data","split","word","base","gchars","bchars","gchar","indexOf","slice","baseInput","filter","possibleListFilter","str","legalGuess","includes","addon","endsWith","setMessage","messageJsx","checkUseAllHints","buildGameOverMessage","keyboard","clearInput","illegalGuessCount","filteredFieldNames","Object","keys","JSONstring","stringify","doInputSubmit","substring","commonKeyHandler","nativeEvent","natEvent","inputType","focus","maxLength","ch","newList","n","marginTop","keyboardRef","r","onKeyPress","onVirtKeyPress","bind","theme","layout","default","buttonTheme","class","buttons","legalGuessCount","guessesText","newGameButton","result","ok","json","meanings","partOfSpeech","definitions","definition","html","getDefinition","def","msgObj","buttonJsx","msgButton","defhtml","c","guessLines","guessJsxIndex","formatGuess","newObj","poolLine","getPoolChars","position","opacity","top","left","ref","elem","tabIndex","autoFocus","onInput","onKeyDown","onRealKeyDown","onBlur","genMessageLine","newButtonLine","getVirtKeyboard","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bab9254b.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\nimport {EXACT, WRONG, NOTUSE, UNKNOWN, WRONGBIT, NOTUSEBIT} from './Game.js';\n\nconst nbsp = String.fromCharCode(160);\n\n// abstract class for the different ways of handling hints\nclass HintHandler {\n    constructor(gameObj) {\n        if (new.target === HintHandler) {\n            throw new TypeError('cannot instantiate HintHandler class');\n        }\n        // some methods must be overridden\n        if (this.computeGuessCharColor === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement computeGuessCharColor method`);\n        }\n        if (this.formatGuessTotals === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement formatGuessTotals method`);\n        }\n        if (this.comparePosMaps === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement comparePosMaps method`);\n        }\n        this.gameObj = gameObj;\n    }\n\n    static getHintHandler(gameObj) {\n        return (gameObj.settings.noMarkGuessChars ? new HintHandlerShowTotals(gameObj) : new HintHandlerMarkChars(gameObj));\n    }\n    \n    //framework for checking all hints\n    checkUseAllHints(newGuess) {\n        // for each previous guess, going backwards, see if our guess would produce a similar result\n        for (let gidx = this.gameObj.guessList.length-1; gidx >= 0; gidx--) {\n            const guessObj = this.gameObj.guessList[gidx];\n            const oldPosMap = guessObj.posMap;\n            // get compare info for that guess vs. our new guess\n            const newPosMap = this.gameObj.doCompare(guessObj.guess, newGuess);\n            const errMsg = this.comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj);\n            if (errMsg !== '') return errMsg;\n        }\n        return null; // if we got this far\n    }\n\n    policyIncludes(bits) {\n        // console.log('policyIncludes', this.gameObj.settings.hintUsePolicy, bits);\n        return ((this.gameObj.settings.hintUsePolicy & bits) !== 0)\n    }\n\n    hasUnknowns(val1, val2) {\n        return (val1 === UNKNOWN && val2 === UNKNOWN);\n    }\n}\n\n// class for handling hints by marking chars\nclass HintHandlerMarkChars extends HintHandler{\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        let bgcolor = 'white'; // default\n        if (guessObj.posMap[pos] === EXACT) {\n            bgcolor = 'lightgreen';\n            this.gameObj.greenString += ` ${chval}`;\n        }\n        else if (guessObj.posMap[pos] === WRONG) {\n            bgcolor = 'yellow';\n            this.gameObj.yellowString += ` ${chval}`;\n        }\n        else if (submitted) {\n            const markedCount = this.getMarkedCount(guessObj.guess, guessObj.posMap, chval);\n            if (markedCount === 0) {\n                this.gameObj.greyString += ` ${chval}`;\n                this.gameObj.notInPool[chval] = 1;\n            }\n        }\n        return bgcolor;\n    }\n\n    // in this handler, we don't show anything at end of line\n    formatGuessTotals(guessObj, guessLine) {\n    }\n\n    getMarkedCount(guess, posMap, searchChr) {\n        let count = 0;\n        Array.from(guess).forEach( (chr, idx) => {\n            count += (posMap[idx] !== NOTUSE && chr === searchChr) ? 1 : 0;\n        });\n        return count;\n    }\n    \n    genErrMsg(newPosMap, oldPosMap, pos, newGuess, oldGuess) {\n        const newCode = newPosMap[pos];\n        const oldCode = oldPosMap[pos];\n        const oldChr = oldGuess[pos];\n        // we know policy at least includes EXACT\n        if (oldCode === EXACT) return `chr ${pos+1} must be ${oldChr}, `;\n        if (this.policyIncludes(NOTUSEBIT) && oldCode === NOTUSE) {\n            // see if oldChr is used in EXACT or WRONG to adjust errmsg\n            const count = this.getMarkedCount(oldGuess, oldPosMap, oldChr);\n            const usesStr = (count === 1 ? 'use' :'uses');\n            return (count === 0 ?\n                    `must not use ${oldChr}, ` :\n                    `only ${count} ${usesStr} of ${oldChr}, `);\n        }\n        if (this.policyIncludes(WRONGBIT)&& oldCode === WRONG){\n            if (newCode === EXACT) return `chr ${pos+1} must not be ${oldChr}, `;\n            if (newCode === NOTUSE) return `must use ${oldChr} somewhere, `;\n        }\n        return '';\n    }\n\n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        // console.log(`${guessObj.guess}, ${newPosMap}, ${oldPosMap}`);\n        const len = newGuess.length;\n        let errMsg = '';\n        for (let pos=0; pos<len; pos++) {\n            const newCode = newPosMap[pos];\n            const oldCode = oldPosMap[pos];\n            if (!this.hasUnknowns(newCode, oldCode) && newCode !== oldCode) {\n                // errMsg += `chr ${pos+1} ${newCode} !== ${oldCode}, `;\n                errMsg += this.genErrMsg(newPosMap, oldPosMap, pos, newGuess, guessObj.guess);\n            }\n        }\n        if (errMsg.length > 0) errMsg += `see ${guessObj.guess}`;\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        return tstPosMap.every((val, index) => val === basePosMap[index] || this.hasUnknowns(val, basePosMap[index]));\n    }\n}\n\n// class for handling hints by just showing totals (harder)\nclass HintHandlerShowTotals extends HintHandler{\n    // when we are not marking guess chars, we only know notInPool\n    // which is the special case when no green or yellow\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        const bgcolor = 'white';\n        if (submitted && (guessObj.posMap.every(val => val === NOTUSE))) {\n            this.gameObj.notInPool[chval] = 1;\n        }\n        return bgcolor;\n    }\n\n    styleForTotals(type) {\n        return {\n            borderRadius: '50%',\n            height: '20px',\n            width: '20px',\n            display: 'inline-block',\n            marginLeft: '10px',\n            marginBottom: '5px',\n            textAlign: 'center',\n            backgroundColor: (type === EXACT ? 'lightgreen' : 'yellow'),\n        };\n    }\n    \n    // in this handler we do show totals at end of guess line\n    formatGuessTotals(guessObj, guessLine) {\n        const [exlen, wplen] = this.countVals(guessObj.posMap);\n        [EXACT, WRONG].forEach(type => {\n            const chval = (type===EXACT ? exlen : wplen);\n            guessLine.push(\n                <div style={this.styleForTotals(type)} >\n                  {chval}\n                </div>\n            );\n        });\n    }\n    \n    countVals(posMap) {\n        let counts = Array.from([0, 0, 0, 0]);\n        posMap.forEach(val => counts[val-1]++);\n        return counts;\n    }\n\n    countKnownVals(oldPosMap, newPosMap) {\n        let oldcounts = Array.from([0,0,0,0]);\n        let newcounts = Array.from([0,0,0,0]);\n        for (let idx=0; idx < oldPosMap.length; idx++) {\n            const oldval = oldPosMap[idx];\n            const newval = newPosMap[idx];\n            if (!this.hasUnknowns(oldval, newval)) {\n                oldcounts[oldval-1]++;\n                newcounts[newval-1]++;\n            }\n        }\n        return [oldcounts[0], oldcounts[1], newcounts[0], newcounts[1]];\n    }\n\n    genCountSpans(exact, wrong) {\n        const yellowSpan = (!this.policyIncludes(WRONGBIT) ? '' : (\n              <span style={this.styleForTotals(WRONG)}>\n                {wrong}\n              </span>\n        ));            \n        return (\n            <Fragment>\n              <span style={this.styleForTotals(EXACT)}>\n                {exact}\n              </span>\n              {yellowSpan}\n            </Fragment>\n        );\n    }\n    \n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        const [oldE, oldW, newE, newW] = this.countKnownVals(oldPosMap, newPosMap);\n        let errMsg = '';\n        if (oldE !== newE || (this.policyIncludes(WRONGBIT) && oldW !== newW)) {\n            // console.log(this.gameObj.settings.hintUsePolicy, oldE, oldW, newE, newW);\n            errMsg = (\n                <Fragment>\n                  {`from ${guessObj.guess}, need `}\n                  {this.genCountSpans(oldE, oldW)}\n                  {`,${nbsp}${nbsp}not `}\n                  {this.genCountSpans(newE, newW)}\n                </Fragment>\n            );\n        }\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        const [tstE, tstW, baseE, baseW] = this.countKnownVals(tstPosMap, basePosMap);\n        return (tstE === baseE && tstW === baseW);\n    }\n    \n}\n\nexport {HintHandler};\n\n","import React, { Component, Fragment } from \"react\";\nimport NumericInput from \"react-numeric-input\";\nimport {EXACTBIT, WRONGBIT, NOTUSEBIT} from './Game.js';\nconst nbsp = String.fromCharCode(160);\n\nclass SettingsPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            settings : {},\n        };\n    }\n    \n    updateSettings(settingName, newval) {\n        // update the settings (which is shared between Game and us\n        // and set the state so we re-render\n        this.settings[settingName] = newval;\n        this.setState({settings: this.settings});\n        // kludge for special case\n        if (this.settings.noMarkGuessChars && this.settings.hintUsePolicy === EXACTBIT+WRONGBIT) {\n            this.settings.hintUsePolicy += NOTUSEBIT;\n        }\n    }\n    \n    getSwitch(settingName) {\n        if (true) return (\n            <input\n              type=\"checkbox\"\n              checked={this.settings[settingName]}\n              onChange= {() => this.updateSettings(settingName, !this.props.gameObj.settings[settingName])}\n              id={settingName}\n              height={15}\n              width={30}\n              style={{float: 'left'}}\n            />\n        )\n    }\n    \n    // <div align='right' style={{display:'inline-block', textAlign:'right'}}>\n    genSwitchSetting(settingName, labeltext) {\n        return (\n            <div key={this.switchKey++} style={{float: 'left', width:'300px'}}>\n            <span style={{fontSize:'14px'}} >{`${labeltext}${nbsp}${nbsp}`} </span>\n              <div style={{float: 'right'}} >\n                {this.getSwitch(settingName)}\n              </div>\n              <br/>\n            </div>\n        );\n    \n    }\n\n    genNumericInputSetting(settingName, labeltext) {\n        return (\n            <div style={{float: 'left', width:'320px'}}>\n              <span style={{fontSize:'14px'}} >\n                {labeltext}\n              </span>\n              <div style={{float:'right'}}>\n                <NumericInput\n                  id={settingName}\n                  min={5}\n                  max={8}\n                  value={this.settings[settingName] || \"\"} \n                  onChange={(val) => this.updateSettings(settingName, val)}\n                  style = {{\n                      border: '1px solid black',\n                      input: {\n                          marginLeft: '5px',\n                          height: '18px',\n                          width: '40px',\n                      },\n                  }}\n                >\n                </NumericInput>\n              </div>\n            </div>\n        );\n    } \n\n    genRadioSetting(groupName, selectVal, text, index, isHorizontal) {\n        // console.log('genRadioSetting', groupName, selectVal, text, isHorizontal);\n        const lineBreak = (isHorizontal ? '' : <br/>);\n        return (\n            <Fragment>\n              <input\n                type=\"radio\"\n                value={parseInt(selectVal)}\n                name={groupName}\n                key={index}\n                checked={this.settings[groupName] === parseInt(selectVal)}\n                style = {{marginLeft: '15px'}}\n                onChange={(event) => {\n                    const name = event.target.name;\n                    const val = parseInt(event.target.value);\n                    this.updateSettings(name, val);\n                    // console.log('onChange for Radio', name, val, this.settings, event);\n                }}\n              />\n              {text}\n              {lineBreak}\n            </Fragment>\n        );\n    }\n\n    genRadioGroupSetting(groupName, groupHeaderText, optsArray, isHorizontal=false) {\n        // generate the radio options section\n        // optsArray is a set of text, val pairs\n        const optsJsxArray = optsArray.map((optset, index) => {\n            const [text, val] = optset;\n            return this.genRadioSetting(groupName, val, text, index, isHorizontal);\n        });\n        return (\n            <Fragment>\n              {groupHeaderText}\n              <br/>\n              <div\n                value = {this.settings[groupName]}\n              >\n                {optsJsxArray}\n              </div>\n            </Fragment>\n        );\n    }\n\n    genHintUsePolicySetting() {\n        const choicesAryMark = [\n                    ['None (most flexible)', 0],\n                    ['Must Reuse Green (slightly harder)', EXACTBIT],\n                    ['Must Reuse Green and Yellow (harder)', EXACTBIT+WRONGBIT],\n                    ['Must Reuse All Hints (hardest and annoying)', EXACTBIT+WRONGBIT+NOTUSEBIT]\n        ];\n        const choicesAryNonMark = [\n                    ['None (most flexible)', 0],\n                    ['Green Totals Must Match (slightly harder)', EXACTBIT],\n                    ['All Totals Must Match (hardest and annoying)', EXACTBIT+WRONGBIT+NOTUSEBIT]\n        ];            \n        const choicesAry = this.settings.noMarkGuessChars ? choicesAryNonMark : choicesAryMark;\n        \n        return this.genRadioGroupSetting('hintUsePolicy', 'Hint Reuse Requirements', choicesAry);\n    }\n    \n    render() {\n        this.gameObj = this.props.gameObj;\n        this.settings = this.gameObj.settings;  // shares the Game settings\n        this.switchKey = 0;\n        return (\n            // first is button to return to game\n            <div>\n              <button\n                style = {{\n                    marginRight: '10px',\n                    marginBottom: '5px',\n                }}\n                onClick = {() => {\n                    this.gameObj.setState({useGamePage:true});\n                    // check if any settings changed which require a new game\n                    const critSettings = ['wordlen', 'allowPlurals'];\n                    critSettings.forEach( field => {\n                        if (this.props.inSettings[field] !== this.settings[field]) {\n                            this.gameObj.startNewGame();\n                        }\n                    });\n                }}\n                \n              >\n                {String.fromCharCode(0x2b05)}\n              </button>\n              Settings (* changes will start new Game)\n              <br/>\n              <div style={{width:'300px', display:'inline-block', fontSize:'14px'}}>\n                {this.genRadioGroupSetting('wordlen', 'Word Length (longer=harder) *', [\n                    ['5', 5], ['6', 6], ['7', 7], ['8', 8],\n                ], true)}\n                <br/>\n                {this.genSwitchSetting('guessMustBeWord', 'Guess must be word? (harder)') }\n                {this.genSwitchSetting('noMarkGuessChars', 'Not Mark Guess Chars? (much harder)') }\n                {this.genSwitchSetting('allowPlurals', `Allow Plurals of ${this.settings.wordlen - 1} letter words? (easier) *`) }\n                {this.genSwitchSetting('startWithReveal', `Start with 1-letter Reveal? (easier)`) }\n                {false && this.genSwitchSetting('countIllegalGuesses', 'Count Illegal Guesses?') }\n                {this.genSwitchSetting('useVirtKeyboard', 'Use Virtual Keyboard?') }\n                {this.genHintUsePolicySetting()}\n       \n              </div>\n            </div>\n        );\n    }\n}\n\nexport {SettingsPage};\n","import React, { Component, Fragment } from \"react\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {HintHandler} from './HintHandler.js';\nimport {SettingsPage} from './SettingsPage.js';\n\n// import * as _ from 'underscore';\nimport \"./index.css\";\n\nconst nbsp = String.fromCharCode(160);\nconst [EXACT, WRONG, NOTUSE, UNKNOWN] = [1,2,3,4];\nconst [EXACTBIT, WRONGBIT, NOTUSEBIT] = [2,4,8];\nconst WILDCHAR = '?';\nconst savedGameStorageName = 'wordguessSavedGame';\n// list of fields from the this that we will save\nconst savedGameFields = [\n    'settings',\n    'answer',\n    'guessList',\n    'gameOver',\n    'message',\n    'totalGuesses',\n    'input',\n];\n\n\nclass Game extends Component {\n    constructor() {\n        super();\n        // uncomment to get rid of old storage item (eg, if new format needed)\n        // window.localStorage.removeItem(savedGameStorageName);\n        const savedGameJSON = window.localStorage.getItem(savedGameStorageName);\n        // console.log('savedGameJSON:', savedGameJSON);\n        if (savedGameJSON) {\n            this.restoreSavedState(savedGameJSON);\n        } else {\n            this.setDefaultGameState();\n        }\n        // can setup state directly here since in constructor\n        this.state = this.initReactState;\n        this.isMobile = ('ontouchstart' in document.documentElement);\n        // console.log('constructor state set complete');\n    }\n\n    setDefaultGameState() {\n        console.log('setting default game state');\n        // default settings\n        this.settings = {\n            wordlen: 5,\n            guessMustBeWord : true,\n            noMarkGuessChars : false,            \n            hintUsePolicy : EXACTBIT,\n            useVirtKeyboard: false,\n            allowPlurals: false,\n            startWithReveal: false,\n        };\n        this.answer = '';\n        this.inputElem = React.createRef();\n        this.usedDefaultGameState = true;\n        this.totalGuesses = 0;\n        this.message = '';\n        // return the state that the constructor will put in this.state directly\n        this.initReactState = {\n            layoutName: \"default\",\n            input: \"\",\n            letterMap: {},\n            guessList: [],\n            useGamePage : false,   // enforce settings for very first time thru\n            settings: this.settings,\n            message: this.message,\n            totalGuesses: this.totalGuesses,\n        };\n    }\n\n    restoreSavedState(savedGameJSON) {\n        const savedGame = JSON.parse(savedGameJSON);\n        savedGameFields.forEach( (field) => this[field] = savedGame[field]);\n        this.inputElem = React.createRef();\n        this.setInputs(this.input);\n        this.hintHandler = HintHandler.getHintHandler(this);\n        this.usedDefaultGameState = false;\n        // notInPool will be rebuilt on each render so no need to restore here\n        this.tempAlert('Restored Saved Game State', 1500);\n        this.prevDataLength = 0;\n        // return the state that the constructor will put in this.state directly\n        this.initReactState = {\n            layoutName: \"default\",\n            letterMap: {},\n            useGamePage : true,   // since we saved things while in gamepage\n            settings: this.settings,\n            input: this.input,\n            gameOver: this.gameOver,\n            totalGuesses: this.totalGuesses,\n            guessList: this.guessList,\n            message: this.message,                       \n        };\n\n        // console.log(`restoreSavedState this.guessList=${this.guessList}`);\n    }\n    \n    tempAlert(msg,duration,bgcolor='red') {\n        // console.log(msg);\n        var el = document.createElement(\"div\");\n        el.setAttribute(\"style\", `position:absolute;\\\n                             top:0%; left:10%; \\\n                             background-color:${bgcolor}; \\\n                             border-color:black; \\\n                             border-width:1px; \\\n                             `);\n        el.innerHTML = msg;\n        setTimeout(function(){\n            el.parentNode.removeChild(el);\n        },duration);\n        document.body.appendChild(el);\n        return new Promise(resolve => setTimeout(resolve,duration));\n    }\n    \n    async componentDidMount() {\n        if (this.usedDefaultGameState) {\n            this.startNewGame();\n        }\n        else {\n            // we are using a restored state,\n            // reconstruct the longer wordList and possibleList\n            // we do this here because constructor cannot be async\n            await this.buildWordList(this.settings.wordlen);\n            // reconstruct possibleList from guessList (so we didn't have to save the whole possibleList)\n            this.possibleList = Array.from(this.wordList);\n            this.guessList.forEach((guessObj) => {\n                this.possibleList = this.getNewPossibleList(guessObj.guess, guessObj.posMap);\n            });\n            this.setState({possibleListLen: this.possibleList.length});\n            // console.log(`componentDidMount possibleListLen=${this.possibleList.length}, gameOver=${this.gameOver}`);\n            // also gameOverMessage if needed\n            if (false && this.gameOver) {\n                this.input = this.answer;\n                this.message = await this.buildGameOverMessage();\n                this.setState(\n                    {gameOver:true,\n                     message: this.message,\n                    });\n            }\n        }\n    }\n    \n    componentDidUpdate() {\n    }\n\n    async startNewGame() {\n        this.guessList = [];\n        this.setInputs('');\n        this.hintHandler = HintHandler.getHintHandler(this);\n        await this.buildWordList(this.settings.wordlen);\n        this.possibleList = Array.from(this.wordList);\n        this.answer = this.wordList[Math.floor(Math.random() * this.wordList.length)].toUpperCase();\n        this.answer = 'REDOX';\n        this.totalGuesses = 0;\n        if (this.settings.startWithReveal) {\n            const inputAry = Array(this.settings.wordlen).fill(WILDCHAR);\n            const revealPos = this.findRevealPos();\n            inputAry[revealPos] = this.answer[revealPos];\n            this.setInputs(inputAry.join(''));\n            const posMap = this.doCompare(this.input, this.answer);\n            this.guessList.push({\n                guess: this.input,\n                index : this.guessList.length,\n                posMap,\n            });\n            this.possibleList = this.getNewPossibleList(this.input, posMap);\n            this.setInputs('');\n            this.totalGuesses = 1;\n        }\n        // console.log('this.answer =', this.answer);\n        this.gameOver = false;\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n            gameOver: false,\n            totalGuesses: this.totalGuesses,\n            message: null,\n        });\n        this.prevDataLength = 0;\n    }\n    \n    async buildWordList(wordlen, allowPlurals=this.settings.allowPlurals) {\n        if (wordlen === this.curAnswerLen) return;\n        this.curAnswerLen = wordlen;\n        const URL = `/wordguess/ospd${allowPlurals ? '' : 'np'}${wordlen}.txt`;\n        // console.log('URL', URL);\n        const data = await fetch(URL);\n        console.log('fetch complete');\n        const text = await data.text();\n        // console.log('data.text() complete');\n        // console.log(text);\n        this.wordList = await text.split('\\n');\n        this.wordList = await this.wordList.map(word => word.toUpperCase());\n        console.log(`wordlist for len ${wordlen} built`);\n    }\n\n    doCompare(guess, base) {\n        let gchars = [...guess];\n        let bchars = [...base];\n        let posMap = new Array(this.settings.wordlen).fill(NOTUSE);\n        // first do exact matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar === bchars[index]) {\n                bchars[index] = null;\n                gchars[index] = null;\n                posMap[index] = EXACT;\n            }\n            else if (bchars[index] === WILDCHAR || gchar === WILDCHAR) {\n                posMap[index] = UNKNOWN;\n            }\n        });\n        // then do any more matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar !== null) {\n                const pos = bchars.indexOf(gchar);\n                if (pos >= 0) {\n                    bchars[pos] = null;\n                    posMap[index] = WRONG;\n                }\n            }\n        });\n        return posMap;\n    }\n\n    mostRecentGuess() {\n        return (this.guessList.length > 0 ? this.guessList.slice(-1)[0] : null);\n    }\n    \n\n    getNewPossibleList(baseInput, basePosMap) {\n        return this.possibleList.filter(word => {\n            const tstPosMap = this.doCompare(baseInput, word);\n            const ok = this.hintHandler.possibleListFilter(tstPosMap, basePosMap);\n            // if (ok) console.log(word, tstPosMap, basePosMap);\n            return ok;\n        });\n    }\n\n    setInputs(str) {\n        this.input = str;\n        if (this.inputElem && str) this.inputElem.value = str;\n    }\n    \n    async doInputSubmit() {\n        let legalGuess = true;  // assume this\n        if (this.input.length !== this.answer.length) return;\n        this.totalGuesses++;\n        // console.log('usedHintsObj', usedHintsObj);\n        if (this.settings.guessMustBeWord && !this.wordList.includes(this.input)) {\n            // await this.tempAlert('Guess must be a Legal Scrabble Word', 1500);\n            const addon = (this.input.endsWith('S') && !this.settings.allowPlurals ? ', plurals are disabled' : '');\n            this.setMessage(`Guess must be in wordlist${addon}`);\n            legalGuess = false;\n        }\n        else if (this.settings.hintUsePolicy !== 0 && this.guessList.length > 0) {\n            const messageJsx = this.hintHandler.checkUseAllHints(this.input);\n            if (messageJsx) {\n                // console.log('messageJsx', messageJsx);\n                this.setMessage(messageJsx, 'rgb(230,230,230)');\n                legalGuess = false;\n            }\n        }\n        if (legalGuess) {    \n            // guess is legal, see how right it is\n            const posMap = this.doCompare(this.input, this.answer);\n            this.guessList.push({\n                guess: this.input,\n                index : this.guessList.length,\n                posMap,\n            });\n            this.possibleList = this.getNewPossibleList(this.input, posMap);\n            // console.log(this.possibleList);\n            \n            if (posMap.every(val => val === EXACT)) {\n                this.gameOver = true;\n                this.message = await this.buildGameOverMessage();\n                this.setState(\n                    {gameOver:true,\n                     message: this.message,\n                    });\n            }\n        }\n        // clean up input for the next time thru\n        if (legalGuess) {\n            this.setInputs('');\n            if (this.settings.useVirtKeyboard) this.keyboard.clearInput();\n        }\n        else {\n            this.illegalGuessCount++;\n            this.setState({\n                totalGuesses: this.totalGuesses,\n            });\n        }\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n        });\n\n        // handle the fact that embedded objects need their fields in the list\n        // the last fields are from guessList objects (shown explicitly in case the list is empty)\n        const filteredFieldNames =  [...savedGameFields, ...Object.keys(this.settings), 'guess', 'index', 'posMap', 'html', 'def', 'bgcolor'];\n        const JSONstring = JSON.stringify(this, filteredFieldNames);\n        window.localStorage[savedGameStorageName] = JSONstring;\n        // console.log('JSONstring:', JSON.stringify(this, filteredFieldNames, 2));\n        console.log(`message: ${this.message}`);\n    }\n\n    commonKeyHandler(key) {\n        // console.log(key);\n        if (this.state.gameOver) return;\n        if (key === '?') console.log('this.answer =', this.answer);\n        if (key === 'Backspace' && this.state.message != null) {\n            this.setState({message: null});\n        }\n        if (['Enter', '{enter}'].includes(key)) {\n            this.doInputSubmit();\n        }\n        else if (key === 'Backspace' && this.input.length > 0) {\n            this.setInputs(this.input.slice(0, -1));\n            this.setState({ input: this.input });\n        }\n        else {\n            key = key.toUpperCase();\n            if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.includes(key)) {\n                this.setInputs(this.input + key);\n                if (this.input.length > this.answer.length) {\n                    this.setInputs(this.input.substring(0, this.answer.length));\n                }\n                this.setState({ input: this.input });\n            }\n        }\n    }\n    \n    onVirtKeyPress(key) {\n        // console.log(\"Virt Key pressed\", key);\n        this.commonKeyHandler(key);\n    }\n\n    onRealKeyDown(event) {\n        let key = event.nativeEvent.key;\n        if (false) {\n            const msgtxt = `Real Key Down ${key}`;\n            this.logMsg = msgtxt;\n            // console.log(msgtxt);\n            if (key === 'Enter') this.setMessage(msgtxt);\n        }\n        if (key === 'Enter' && this.input.length === this.answer.length) {\n            this.commonKeyHandler(key);\n        }\n    }\n\n    onInput(event) {\n        let key = null;\n        const natEvent = event.nativeEvent;\n        const targ = natEvent.target;\n        const newval = targ.value;\n        const inputType = natEvent.inputType;\n        if (['insertText',\n             'insertCompositionText',\n             'deleteContentBackward'].includes(inputType)) {\n            if (newval.length > this.input.length)\n                key = newval[newval.length - 1];\n            else if (newval.length < this.input.length) {\n                key = 'Backspace';\n            }\n        }\n        if (false) {\n            const msgtxt = `; onInput ${inputType} ${newval} ${key}`;\n            this.logMsg += msgtxt;\n            console.log(msgtxt);\n        }\n        if (key !== null) this.commonKeyHandler(key);\n    }\n\n    // called when focus leaves our input element so we can put it back\n    onBlur(event) {\n        if (this.inputElem) {\n            this.inputElem.focus();\n        }\n    }\n    \n    onChange(event) {\n        if (false) {\n            const natEvent = event.nativeEvent;\n            const targ = natEvent.target;\n            const newval = targ.value;\n            const inputType = natEvent.inputType;\n            const msgtxt =  `; onChange ${inputType} ${newval}`;\n            this.logMsg += msgtxt;\n            console.log(msgtxt);\n            this.setMessage(this.logMsg);\n            this.logMsg = '';\n            this.commonKeyHandler('Enter');\n        }\n    }\n\n    findRevealPos() {\n        let maxLength = 0;\n        let revealPos = 0;\n        [...this.answer].forEach( (ch, index) => {\n            // skip if in mark chars mode and char is already green\n            const shouldSkip = (!this.settings.noMarkGuessChars &&\n                                this.guessList.length > 0 &&\n                                this.guessList[this.guessList.length - 1].posMap[index] === EXACT);\n            if (!shouldSkip) {\n                const newList = this.possibleList.filter( (word) => word[index] === ch);\n                // console.log(`knowing ${ch} at pos ${index} reduces possibleList from ${this.possibleList.length} to ${newList.length}`);\n                if (newList.length > maxLength) {\n                    maxLength = newList.length;\n                    revealPos = index;\n                }\n            }\n        });\n        return revealPos;\n    }\n    \n    formatGuess(guessObj, submitted=false) {\n        let guessLine = [];\n        const guess = guessObj.guess;\n        for (let n=0; n < this.answer.length; n++) {\n            const chval = (n < guess.length ? guess[n] : nbsp);\n            // console.log('guessObj', guessObj);\n            const bgcolor = this.hintHandler.computeGuessCharColor(guessObj, n, chval, submitted);\n            guessLine.push(\n                <div key={n} style={{\n                    border: '1px solid black',\n                    backgroundColor: bgcolor,\n                    height: '20px',\n                    width: '20px',\n                    display: 'inline-block',\n                    marginLeft: '5px',\n                    marginBottom: '5px',\n                    marginTop: '5px',\n                    textAlign: 'center',\n                    // fontSize: '16px',\n                }}>\n                  {chval}\n                </div>\n            );\n        };\n        \n        // conditionally  show total exact and wrongplace\n        if (submitted) {\n            this.hintHandler.formatGuessTotals(guessObj, guessLine);\n        }\n        return guessLine;\n    }\n\n    getVirtKeyboard() {\n        if (!this.settings.useVirtKeyboard) return <Fragment></Fragment>;\n        return (\n            <Keyboard\n              keyboardRef={r => (this.keyboard = r)}\n              onKeyPress = {this.onVirtKeyPress.bind(this)}\n              onChange = {this.onChange.bind(this)}\n              theme={\"hg-theme-default hg-layout-default myTheme\"}\n              layoutName={this.state.layoutName}\n              layout={{\n                  default: [\n                      \"Q W E R T Y U I O P\",\n                      'A S D F G H J K L',\n                      \"Z X C V B N M {bksp} {enter}\",\n                  ]\n              }}\n              buttonTheme={[\n                  {\n                      class: \"hg-yellow\",\n                      buttons: this.yellowString,\n                  },\n                  {\n                      class: \"hg-green\",\n                      buttons: this.greenString,\n                  },\n                  {\n                      class: \"hg-grey\",\n                      buttons: this.greyString,\n                  }\n                  \n              ]}\n              display={{\n                  '{enter}' : 'enter',\n                  '{bksp}' : '<<',\n              }}\n            />\n        );\n    }\n\n    newGameButton() {\n        return (\n            <button\n              onClick = {this.startNewGame.bind(this)}\n              style = {{\n                  marginLeft: '5px',\n                  marginRight: '10px',\n              }}\n            >\n              New\n            </button>\n        );\n    }\n\n    newButtonLine() {\n        let legalGuessCount = (this.state.guessList ? this.state.guessList.length : 0);\n        // if (this.settings.startWithReveal) legalGuessCount--;\n        const guessesText = (this.totalGuesses === 0 ? '' :\n                             `Guesses: ${this.totalGuesses}, (${legalGuessCount} Legal)`);\n              \n        return (\n            <Fragment>\n              {this.newGameButton()}\n                {guessesText}\n            </Fragment>\n        );\n    }\n\n    async getDefinition() {\n        const word = this.input;\n        // make a req to the api\n        const result = await fetch(\n            `https://api.dictionaryapi.dev/api/v2/entries/en/${word}`\n        );\n        if (!result.ok) {\n            // alert(\"No definition found\");\n            return null;\n        }\n        const data = await result.json();\n        // console.log(data);\n        return `(${data[0].meanings[0].partOfSpeech}): ${data[0].meanings[0].definitions[0].definition}`;\n    }\n    \n    async buildGameOverMessage() {\n        // const numGuesses = this.state.guessList.length;\n        var html = `Match!!`;\n        const def = await this.getDefinition();\n        return {html: html,\n                def: def,\n                bgcolor: 'white',\n               };\n    }\n    \n    setMessage(html, bgcolor='pink') {\n        const msgObj = {html, bgcolor};\n        // console.log('setMessage', msgObj);\n        this.setState({\n            message: msgObj,\n        });\n    }\n    \n     genMessageLine() {\n         // console.log('state.message', this.state.message);\n         if (!this.state.message) return (<Fragment></Fragment>);\n         const buttonJsx = (this.state.message.msgButton === null ?\n                           (<Fragment></Fragment>) :\n                            this.state.message.msgButton);\n         const defhtml = (this.state.message.def ? `${this.state.message.def}` : '');\n         return(\n             <div style={{backgroundColor : this.state.message.bgcolor}} >\n               {<>{this.state.message.html}</>}\n               {<p><small><small>{defhtml}</small></small></p>}\n             {buttonJsx}\n             </div>\n         );\n    }\n\n    getPoolChars() {\n        return [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].filter((c) => this.notInPool[c] !== 1);\n    }\n    \n    render() {\n        // console.log('render', this.state);\n        if (!this.state || Object.keys(this.state).length === 0) return null;\n        this.hintHandler = HintHandler.getHintHandler(this);  // in case it got changed on settings change\n        this.yellowString = ' ';\n        this.greenString = ' ';\n        this.greyString = ' ';\n        this.notInPool = {};\n        let guessLines = [];\n        this.guessJsxIndex = 0;\n        if (this.state.guessList) {\n            this.state.guessList.forEach( (guessObj) => {\n                guessLines.push(<Fragment key={this.guessJsxIndex++}>{this.formatGuess(guessObj, true)}</Fragment>);\n                guessLines.push(<br key={this.guessJsxIndex++}/>);\n            });\n        }\n        // sync up this.input and this.inputElem.value\n        this.setInputs(this.input);\n        // if game not over, push inputty line as well\n        if (!this.state.gameOver && this.state.input !== undefined) {\n            const newObj = {\n                guess: this.state.input,\n                posMap: new Array(this.settings.wordlen).fill(NOTUSE),\n            };\n            guessLines.push(this.formatGuess(newObj, false));\n        }\n\n        const poolLine = (!this.state.guessList || this.state.guessList.length === 0 || this.gameOver ?\n                          <Fragment></Fragment> :\n                          <div>\n                            {`Pool: ${this.getPoolChars().join(' ')}`}\n                            <br/>\n                          </div>\n                         );\n\n        const gamePage = () => {\n            return (\n                <Fragment>\n                  <div  style={{position:'relative'}}>\n                    <button\n                      style = {{\n                          marginRight: '10px',\n                      }}\n                      onClick = {() => this.setState({useGamePage:false})}\n                    >\n                      {String.fromCharCode(0x2699)}\n                    </button>\n                    {`WordGuess Game,   ${this.possibleList ? this.possibleList.length : 0} Possible`}\n                    <input\n                      type = 'text'\n                      style = {{opacity:0.05,\n                                marginLeft: '5px',\n                                fontSize: '1px',\n                                position: 'absolute',\n                                top: '0px',\n                                left: '30px',\n                               }}\n                      width = '100px'\n                      ref = {elem => this.inputElem = elem}\n                      tabIndex = {0}\n                      autoFocus\n                      onInput={this.onInput.bind(this)}\n                      onKeyDown = {this.onRealKeyDown.bind(this)}\n                      onBlur = {this.onBlur.bind(this)}\n                    />\n                  </div>\n                  <div>\n                    {guessLines}\n                    {this.genMessageLine()}\n                  </div>\n                  {poolLine}\n                  {this.newButtonLine()}\n                  <br/>\n                  {this.getVirtKeyboard()}\n                </Fragment>\n            );\n        }\n\n        return (\n            this.state.useGamePage ?\n                gamePage() :\n                <SettingsPage  gameObj={this} inSettings={{...this.settings}}/>\n        );\n    }\n}\n\nexport {Game, EXACT, WRONG, NOTUSE, UNKNOWN, EXACTBIT, WRONGBIT, NOTUSEBIT, WILDCHAR};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from './Game.js';\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}