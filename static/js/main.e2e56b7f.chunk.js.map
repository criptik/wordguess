{"version":3,"sources":["HintHandler.js","SettingsPage.js","Game.js","index.js"],"names":["nbsp","String","fromCharCode","HintHandler","gameObj","TypeError","undefined","this","computeGuessCharColor","constructor","name","formatGuessTotals","comparePosMaps","newGuess","gidx","guessList","length","guessObj","oldPosMap","posMap","newPosMap","doCompare","guess","errMsg","bits","settings","hintUsePolicy","noMarkGuessChars","HintHandlerShowTotals","HintHandlerMarkChars","pos","chval","submitted","bgcolor","EXACT","greenString","WRONG","yellowString","getMarkedCount","greyString","notInPool","guessLine","searchChr","count","Array","from","forEach","chr","idx","NOTUSE","oldGuess","newCode","oldCode","oldChr","policyIncludes","NOTUSEBIT","usesStr","WRONGBIT","len","genErrMsg","tstPosMap","basePosMap","every","val","index","type","borderRadius","height","width","display","marginLeft","marginBottom","textAlign","backgroundColor","countVals","exlen","wplen","push","style","styleForTotals","counts","exact","wrong","yellowSpan","oldE","oldW","newE","newW","genCountSpans","tstE","tstW","baseE","baseW","SettingsPage","state","settingName","newval","setState","checked","onChange","updateSettings","props","id","float","labeltext","key","switchKey","fontSize","getSwitch","min","max","value","border","input","groupName","selectVal","text","isHorizontal","lineBreak","parseInt","event","target","groupHeaderText","optsArray","optsJsxArray","map","optset","genRadioSetting","marginRight","onClick","useGamePage","field","inSettings","startNewGame","genRadioGroupSetting","genSwitchSetting","wordlen","EXACTBIT","Component","savedGameFields","Game","savedGameJSON","window","localStorage","getItem","restoreSavedState","setDefaultGameState","initReactState","isMobile","document","documentElement","console","log","guessMustBeWord","useVirtKeyboard","allowPlurals","answer","inputElem","React","createRef","usedDefaultGameState","illegalGuessCount","message","layoutName","letterMap","a","savedGame","JSON","parse","hintHandler","getHintHandler","tempAlert","prevDataLength","gameOver","buildGameOverMessage","buildWordList","possibleList","wordList","getNewPossibleList","possibleListLen","msg","duration","el","createElement","setAttribute","innerHTML","setTimeout","parentNode","removeChild","body","appendChild","Promise","resolve","Math","floor","random","toUpperCase","curAnswerLen","URL","fetch","data","split","word","base","gchars","bchars","fill","gchar","indexOf","slice","baseInput","filter","possibleListFilter","legalGuess","includes","addon","endsWith","setMessage","messageJsx","checkUseAllHints","keyboard","clearInput","filteredFieldNames","Object","keys","JSONstring","stringify","doInputSubmit","substring","commonKeyHandler","nativeEvent","natEvent","inputType","focus","n","marginTop","keyboardRef","r","onKeyPress","onVirtKeyPress","bind","theme","layout","default","buttonTheme","class","buttons","numGuesses","html","msgObj","buttonJsx","msgButton","c","guessLines","guessJsxIndex","formatGuess","newObj","poolLine","getPoolChars","join","position","opacity","top","left","ref","elem","tabIndex","autoFocus","onInput","onKeyDown","onRealKeyDown","onBlur","genMessageLine","guesslist","newGameButton","getVirtKeyboard","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e2e56b7f.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\nimport {EXACT, WRONG, NOTUSE, WRONGBIT, NOTUSEBIT} from './Game.js';\n\nconst nbsp = String.fromCharCode(160);\n\n// abstract class for the different ways of handling hints\nclass HintHandler {\n    constructor(gameObj) {\n        if (new.target === HintHandler) {\n            throw new TypeError('cannot instantiate HintHandler class');\n        }\n        // some methods must be overridden\n        if (this.computeGuessCharColor === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement computeGuessCharColor method`);\n        }\n        if (this.formatGuessTotals === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement formatGuessTotals method`);\n        }\n        if (this.comparePosMaps === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement comparePosMaps method`);\n        }\n        this.gameObj = gameObj;\n    }\n\n    static getHintHandler(gameObj) {\n        return (gameObj.settings.noMarkGuessChars ? new HintHandlerShowTotals(gameObj) : new HintHandlerMarkChars(gameObj));\n    }\n    \n    //framework for checking all hints\n    checkUseAllHints(newGuess) {\n        // for each previous guess, going backwards, see if our guess would produce a similar result\n        for (let gidx = this.gameObj.guessList.length-1; gidx >= 0; gidx--) {\n            const guessObj = this.gameObj.guessList[gidx];\n            const oldPosMap = guessObj.posMap;\n            // get compare info for that guess vs. our new guess\n            const newPosMap = this.gameObj.doCompare(guessObj.guess, newGuess);\n            const errMsg = this.comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj);\n            if (errMsg !== '') return errMsg;\n        }\n        return null; // if we got this far\n    }\n\n    policyIncludes(bits) {\n        // console.log('policyIncludes', this.gameObj.settings.hintUsePolicy, bits);\n        return ((this.gameObj.settings.hintUsePolicy & bits) !== 0)\n    }\n}\n\n// class for handling hints by marking chars\nclass HintHandlerMarkChars extends HintHandler{\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        let bgcolor = 'white'; // default\n        if (guessObj.posMap[pos] === EXACT) {\n            bgcolor = 'lightgreen';\n            this.gameObj.greenString += ` ${chval}`;\n        }\n        else if (guessObj.posMap[pos] === WRONG) {\n            bgcolor = 'yellow';\n            this.gameObj.yellowString += ` ${chval}`;\n        }\n        else if (submitted) {\n            const markedCount = this.getMarkedCount(guessObj.guess, guessObj.posMap, chval);\n            if (markedCount === 0) {\n                this.gameObj.greyString += ` ${chval}`;\n                this.gameObj.notInPool[chval] = 1;\n            }\n        }\n        return bgcolor;\n    }\n\n    // in this handler, we don't show anything at end of line\n    formatGuessTotals(guessObj, guessLine) {\n    }\n\n    getMarkedCount(guess, posMap, searchChr) {\n        let count = 0;\n        Array.from(guess).forEach( (chr, idx) => {\n            count += (posMap[idx] !== NOTUSE && chr === searchChr) ? 1 : 0;\n        });\n        return count;\n    }\n    \n    genErrMsg(newPosMap, oldPosMap, pos, newGuess, oldGuess) {\n        const newCode = newPosMap[pos];\n        const oldCode = oldPosMap[pos];\n        const oldChr = oldGuess[pos];\n        // we know policy at least includes EXACT\n        if (oldCode === EXACT) return `chr ${pos+1} must be ${oldChr}, `;\n        if (this.policyIncludes(NOTUSEBIT) && oldCode === NOTUSE) {\n            // see if oldChr is used in EXACT or WRONG to adjust errmsg\n            const count = this.getMarkedCount(oldGuess, oldPosMap, oldChr);\n            const usesStr = (count === 1 ? 'use' :'uses');\n            return (count === 0 ?\n                    `must not use ${oldChr}, ` :\n                    `only ${count} ${usesStr} of ${oldChr}, `);\n        }\n        if (this.policyIncludes(WRONGBIT)&& oldCode === WRONG){\n            if (newCode === EXACT) return `chr ${pos+1} must not be ${oldChr}, `;\n            if (newCode === NOTUSE) return `must use ${oldChr} somewhere, `;\n        }\n        return '';\n    }\n\n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        // console.log(`${guessObj.guess}, ${newPosMap}, ${oldPosMap}`);\n        const len = newGuess.length;\n        let errMsg = '';\n        for (let pos=0; pos<len; pos++) {\n            const newCode = newPosMap[pos];\n            const oldCode = oldPosMap[pos];\n            if (newCode !== oldCode) {\n                // errMsg += `chr ${pos+1} ${newCode} !== ${oldCode}, `;\n                errMsg += this.genErrMsg(newPosMap, oldPosMap, pos, newGuess, guessObj.guess);\n            }\n        }\n        if (errMsg.length > 0) errMsg += `see ${guessObj.guess}`;\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        return tstPosMap.every((val, index) => val === basePosMap[index]);\n    }\n}\n\n// class for handling hints by just showing totals (harder)\nclass HintHandlerShowTotals extends HintHandler{\n    // when we are not marking guess chars, we only know notInPool\n    // which is the special case when no green or yellow\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        const bgcolor = 'white';\n        if (submitted && (guessObj.posMap.every(val => val === NOTUSE))) {\n            this.gameObj.notInPool[chval] = 1;\n        }\n        return bgcolor;\n    }\n\n    styleForTotals(type) {\n        return {\n            borderRadius: '50%',\n            height: '20px',\n            width: '20px',\n            display: 'inline-block',\n            marginLeft: '10px',\n            marginBottom: '5px',\n            textAlign: 'center',\n            backgroundColor: (type === EXACT ? 'lightgreen' : 'yellow'),\n        };\n    }\n    \n    // in this handler we do show totals at end of guess line\n    formatGuessTotals(guessObj, guessLine) {\n        const [exlen, wplen] = this.countVals(guessObj.posMap);\n        [EXACT, WRONG].forEach(type => {\n            const chval = (type===EXACT ? exlen : wplen);\n            guessLine.push(\n                <div style={this.styleForTotals(type)} >\n                  {chval}\n                </div>\n            );\n        });\n    }\n    \n    countVals(posMap) {\n        let counts = Array.from([0, 0, 0]);\n        posMap.forEach(val => counts[val-1]++);\n        return counts;\n    }\n\n    genCountSpans(exact, wrong) {\n        const yellowSpan = (!this.policyIncludes(WRONGBIT) ? '' : (\n              <span style={this.styleForTotals(WRONG)}>\n                {wrong}\n              </span>\n        ));            \n        return (\n            <Fragment>\n              <span style={this.styleForTotals(EXACT)}>\n                {exact}\n              </span>\n              {yellowSpan}\n            </Fragment>\n        );\n    }\n    \n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        const [oldE, oldW] = this.countVals(oldPosMap);\n        const [newE, newW] = this.countVals(newPosMap);\n        let errMsg = '';\n        if (oldE !== newE || (this.policyIncludes(WRONGBIT) && oldW !== newW)) {\n            // console.log(this.gameObj.settings.hintUsePolicy, oldE, oldW, newE, newW);\n            errMsg = (\n                <Fragment>\n                  {`from ${guessObj.guess}, need `}\n                  {this.genCountSpans(oldE, oldW)}\n                  {`,${nbsp}${nbsp}not `}\n                  {this.genCountSpans(newE, newW)}\n                </Fragment>\n            );\n        }\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        const [tstE, tstW] = this.countVals(tstPosMap);\n        const [baseE, baseW] = this.countVals(basePosMap);\n        return (tstE === baseE && tstW === baseW);\n    }\n    \n}\n\nexport {HintHandler};\n\n","import React, { Component, Fragment } from \"react\";\nimport NumericInput from \"react-numeric-input\";\nimport {EXACTBIT, WRONGBIT, NOTUSEBIT} from './Game.js';\nconst nbsp = String.fromCharCode(160);\n\nclass SettingsPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            settings : {},\n        };\n    }\n    \n    updateSettings(settingName, newval) {\n        // update the settings (which is shared between Game and us\n        // and set the state so we re-render\n        this.settings[settingName] = newval;\n        this.setState({settings: this.settings});\n    }\n    \n    getSwitch(settingName) {\n        if (true) return (\n            <input\n              type=\"checkbox\"\n              checked={this.settings[settingName]}\n              onChange= {() => this.updateSettings(settingName, !this.props.gameObj.settings[settingName])}\n              id={settingName}\n              height={15}\n              width={30}\n              style={{float: 'left'}}\n            />\n        )\n    }\n    \n    // <div align='right' style={{display:'inline-block', textAlign:'right'}}>\n    genSwitchSetting(settingName, labeltext) {\n        return (\n            <div key={this.switchKey++} style={{float: 'left', width:'300px'}}>\n            <span style={{fontSize:'14px'}} >{`${labeltext}${nbsp}${nbsp}`} </span>\n              <div style={{float: 'right'}} >\n                {this.getSwitch(settingName)}\n              </div>\n              <br/>\n            </div>\n        );\n    \n    }\n\n    genNumericInputSetting(settingName, labeltext) {\n        return (\n            <div style={{float: 'left', width:'320px'}}>\n              <span style={{fontSize:'14px'}} >\n                {labeltext}\n              </span>\n              <div style={{float:'right'}}>\n                <NumericInput\n                  id={settingName}\n                  min={5}\n                  max={8}\n                  value={this.settings[settingName] || \"\"} \n                  onChange={(val) => this.updateSettings(settingName, val)}\n                  style = {{\n                      border: '1px solid black',\n                      input: {\n                          marginLeft: '5px',\n                          height: '18px',\n                          width: '40px',\n                      },\n                  }}\n                >\n                </NumericInput>\n              </div>\n            </div>\n        );\n    } \n\n    genRadioSetting(groupName, selectVal, text, index, isHorizontal) {\n        // console.log('genRadioSetting', groupName, selectVal, text, isHorizontal);\n        const lineBreak = (isHorizontal ? '' : <br/>);\n        return (\n            <Fragment>\n              <input\n                type=\"radio\"\n                value={parseInt(selectVal)}\n                name={groupName}\n                key={index}\n                checked={this.settings[groupName] === parseInt(selectVal)}\n                style = {{marginLeft: '15px'}}\n                onChange={(event) => {\n                    const name = event.target.name;\n                    const val = parseInt(event.target.value);\n                    this.updateSettings(name, val);\n                    // console.log('onChange for Radio', name, val, this.settings, event);\n                }}\n              />\n              {text}\n              {lineBreak}\n            </Fragment>\n        );\n    }\n\n    genRadioGroupSetting(groupName, groupHeaderText, optsArray, isHorizontal=false) {\n        // generate the radio options section\n        // optsArray is a set of text, val pairs\n        const optsJsxArray = optsArray.map((optset, index) => {\n            const [text, val] = optset;\n            return this.genRadioSetting(groupName, val, text, index, isHorizontal);\n        });\n        return (\n            <Fragment>\n              {groupHeaderText}\n              <br/>\n              <div\n                value = {this.settings[groupName]}\n              >\n                {optsJsxArray}\n              </div>\n            </Fragment>\n        );\n    }\n\n    render() {\n        this.gameObj = this.props.gameObj;\n        this.settings = this.gameObj.settings;  // shares the Game settings\n        this.switchKey = 0;\n        return (\n            // first is button to return to game\n            <div>\n              <button\n                style = {{\n                    marginRight: '10px',\n                    marginBottom: '5px',\n                }}\n                onClick = {() => {\n                    this.gameObj.setState({useGamePage:true});\n                    // check if any settings changed which require a new game\n                    const critSettings = ['wordlen', 'allowPlurals'];\n                    critSettings.forEach( field => {\n                        if (this.props.inSettings[field] !== this.settings[field]) {\n                            this.gameObj.startNewGame();\n                        }\n                    });\n                }}\n                \n              >\n                {String.fromCharCode(0x2b05)}\n              </button>\n              Settings (will start new Game)\n              <br/>\n              <div style={{width:'300px', display:'inline-block', fontSize:'14px'}}>\n                {this.genRadioGroupSetting('wordlen', 'Word Length (longer=harder)', [\n                    ['5', 5], ['6', 6], ['7', 7], ['8', 8],\n                ], true)}\n                <br/>\n                {this.genSwitchSetting('guessMustBeWord', 'Guess must be word? (harder)') }\n                {this.genSwitchSetting('noMarkGuessChars', 'Not Mark Guess Chars? (much harder)') }\n                {this.genSwitchSetting('allowPlurals', `Allow Plurals of ${this.settings.wordlen - 1} letter words? (easier)`) }\n                {false && this.genSwitchSetting('countIllegalGuesses', 'Count Illegal Guesses?') }\n                {this.genSwitchSetting('useVirtKeyboard', 'Use Virtual Keyboard?') }\n                {this.genRadioGroupSetting('hintUsePolicy', 'Hint Reuse Requirements', [\n                    ['None (most flexible)', 0],\n                    ['Must Reuse Green (slightly harder)', EXACTBIT],\n                    ['Must Reuse Green and Yellow (harder)', EXACTBIT+WRONGBIT],\n                    ['Must Reuse All Hints (hardest and annoying)', EXACTBIT+WRONGBIT+NOTUSEBIT]\n                ])}\n                \n              </div>\n            </div>\n        );\n    }\n}\n\nexport {SettingsPage};\n","import React, { Component, Fragment } from \"react\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {HintHandler} from './HintHandler.js';\nimport {SettingsPage} from './SettingsPage.js';\n\n// import * as _ from 'underscore';\nimport \"./index.css\";\n\nconst nbsp = String.fromCharCode(160);\nconst [EXACT, WRONG, NOTUSE] = [1,2,3];\nconst [EXACTBIT, WRONGBIT, NOTUSEBIT] = [2,4,8];\nconst savedGameStorageName = 'wordguessSavedGame';\n// list of fields from the this that we will save\nconst savedGameFields = [\n    'settings',\n    'answer',\n    'guessList',\n    'gameOver',\n    'message',\n    'illegalGuessCount',\n];\n\n\nclass Game extends Component {\n    constructor() {\n        super();\n        // uncomment to get rid of old storage item (eg, if new format needed)\n        // window.localStorage.removeItem(savedGameStorageName);\n        const savedGameJSON = window.localStorage.getItem(savedGameStorageName);\n        // console.log('savedGameJSON:', savedGameJSON);\n        if (savedGameJSON) {\n            this.restoreSavedState(savedGameJSON);\n        } else {\n            this.setDefaultGameState();\n        }\n        // can setup state directly here since in constructor\n        this.state = this.initReactState;\n        this.isMobile = ('ontouchstart' in document.documentElement);\n    }\n\n    setDefaultGameState() {\n        console.log('setting default game state');\n        // default settings\n        this.settings = {\n            wordlen: 5,\n            guessMustBeWord : true,\n            noMarkGuessChars : false,            \n            hintUsePolicy : EXACTBIT,\n            useVirtKeyboard: false,\n            allowPlurals: false,\n        };\n        this.answer = '';\n        this.inputElem = React.createRef();\n        this.usedDefaultGameState = true;\n        this.illegalGuessCount = 0;\n        this.message = '';\n        // return the state that the constructor will put in this.state directly\n        this.initReactState = {\n            layoutName: \"default\",\n            input: \"\",\n            letterMap: {},\n            guessList: [],\n            useGamePage : false,   // enforce settings for very first time thru\n            settings: this.settings,\n            message: this.message,\n            illegalGuessCount: this.illegalGuessCount,\n        };\n    }\n\n    async restoreSavedState(savedGameJSON) {\n        const savedGame = JSON.parse(savedGameJSON);\n        savedGameFields.forEach( (field) => this[field] = savedGame[field]);\n        // this.inputElem = React.createRef();\n        this.hintHandler = HintHandler.getHintHandler(this);\n        this.usedDefaultGameState = false;\n        this.input = '';\n        // notInPool will be rebuilt on each render so no need to restore here\n        this.tempAlert('Restored Saved Game State', 1500);\n        this.prevDataLength = 0;\n        // return the state that the constructor will put in this.state directly\n        this.initReactState = {\n            layoutName: \"default\",\n            letterMap: {},\n            useGamePage : true,   // since we saved things while in gamepage\n            settings: this.settings,\n            input: this.input,\n            gameOver: this.gameOver,\n            illegalGuessCount: this.illegalGuessCount,\n            guessList: this.guessList,\n            message: (this.gameOver ? this.buildGameOverMessage() : this.message),                       \n        };\n\n        // reconstruct the longer wordList and possibleList\n        await this.buildWordList(this.settings.wordlen);\n        // reconstruct possibleList from guessList (so we didn't have to save the whole possibleList)\n        this.possibleList = Array.from(this.wordList);\n        this.guessList.forEach((guessObj) => {\n            this.possibleList = this.getNewPossibleList(guessObj.guess, guessObj.posMap);\n        });\n        this.setState({possibleListLen: this.possibleList.length});\n    }\n    \n    tempAlert(msg,duration,bgcolor='red') {\n        // console.log(msg);\n        var el = document.createElement(\"div\");\n        el.setAttribute(\"style\", `position:absolute;\\\n                             top:0%; left:10%; \\\n                             background-color:${bgcolor}; \\\n                             border-color:black; \\\n                             border-width:1px; \\\n                             `);\n        el.innerHTML = msg;\n        setTimeout(function(){\n            el.parentNode.removeChild(el);\n        },duration);\n        document.body.appendChild(el);\n        return new Promise(resolve => setTimeout(resolve,duration));\n    }\n    \n    async componentDidMount() {\n        if (this.usedDefaultGameState) this.startNewGame();\n    }\n    \n    componentDidUpdate() {\n    }\n\n    async startNewGame() {\n        this.guessList = [];\n        this.input = '';\n        this.hintHandler = HintHandler.getHintHandler(this);\n        await this.buildWordList(this.settings.wordlen);\n        this.possibleList = Array.from(this.wordList);\n        this.answer = this.wordList[Math.floor(Math.random() * this.wordList.length)].toUpperCase();\n        // this.answer = 'REDOX';\n        // console.log('this.answer =', this.answer);\n        this.gameOver = false;\n        this.illegalGuessCount = 0;\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n            gameOver: false,\n            illegalGuessCount: this.illegalGuessCount,\n            message: null,\n        });\n        this.prevDataLength = 0;\n    }\n    \n    async buildWordList(wordlen, allowPlurals=this.settings.allowPlurals) {\n        if (wordlen === this.curAnswerLen) return;\n        this.curAnswerLen = wordlen;\n        const URL = `/wordguess/ospd${allowPlurals ? '' : 'np'}${wordlen}.txt`;\n        // console.log('URL', URL);\n        const data = await fetch(URL);\n        console.log('fetch complete');\n        const text = await data.text();\n        // console.log('data.text() complete');\n        // console.log(text);\n        this.wordList = await text.split('\\n');\n        this.wordList = await this.wordList.map(word => word.toUpperCase());\n        console.log(`wordlist for len ${wordlen} built`);\n    }\n\n    doCompare(guess, base) {\n        let gchars = [...guess];\n        let bchars = [...base];\n        let posMap = new Array(this.settings.wordlen).fill(NOTUSE);\n        // first do exact matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar === bchars[index]) {\n                bchars[index] = null;\n                gchars[index] = null;\n                posMap[index] = EXACT;\n            }\n        });\n        // then do any more matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar !== null) {\n                const pos = bchars.indexOf(gchar);\n                if (pos >= 0) {\n                    bchars[pos] = null;\n                    posMap[index] = WRONG;\n                }\n            }\n        });\n        return posMap;\n    }\n\n    mostRecentGuess() {\n        return (this.guessList.length > 0 ? this.guessList.slice(-1)[0] : null);\n    }\n    \n\n    getNewPossibleList(baseInput, basePosMap) {\n        return this.possibleList.filter(word => {\n            const tstPosMap = this.doCompare(baseInput, word);\n            const ok = this.hintHandler.possibleListFilter(tstPosMap, basePosMap);\n            // if (ok) console.log(word, tstPosMap, basePosMap);\n            return ok;\n        });\n    }\n    \n    async doInputSubmit() {\n        let legalGuess = true;  // assume this\n        if (this.input.length !== this.answer.length) return;\n        // console.log('usedHintsObj', usedHintsObj);\n        if (this.settings.guessMustBeWord && !this.wordList.includes(this.input)) {\n            // await this.tempAlert('Guess must be a Legal Scrabble Word', 1500);\n            const addon = (this.input.endsWith('S') && !this.settings.allowPlurals ? ', plurals are disabled' : '');\n            this.setMessage(`Guess must be in wordlist${addon}`);\n            legalGuess = false;\n        }\n        else if (this.settings.hintUsePolicy !== 0 && this.guessList.length > 0) {\n            const messageJsx = this.hintHandler.checkUseAllHints(this.input);\n            if (messageJsx) {\n                // console.log('messageJsx', messageJsx);\n                this.setMessage(messageJsx, 'rgb(230,230,230)');\n                legalGuess = false;\n            }\n        }\n        if (legalGuess) {    \n            // guess is legal, see how right it is\n            const posMap = this.doCompare(this.input, this.answer);\n            this.guessList.push({\n                guess: this.input,\n                index : this.guessList.length,\n                posMap,\n            });\n            this.possibleList = this.getNewPossibleList(this.input, posMap);\n            // console.log(this.possibleList);\n            \n            if (posMap.every(val => val === EXACT)) {\n                this.gameOver = true;\n                this.setState(\n                    {gameOver:true,\n                     message: this.buildGameOverMessage(),\n                    });\n            }\n        }\n        // clean up input for the next time thru\n        if (legalGuess) {\n            this.input = '';\n            this.inputElem.value = '';\n            if (this.settings.useVirtKeyboard) this.keyboard.clearInput();\n        }\n        else {\n            this.illegalGuessCount++;\n            this.setState({\n                illegalGuessCount: this.illegalGuessCount,\n            });\n        }\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n        });\n\n        // handle the fact that embedded objects need their fields in the list\n        // the last fields are from guessList objects (shown explicitly in case the list is empty)\n        const filteredFieldNames =  [...savedGameFields, ...Object.keys(this.settings), 'guess', 'index', 'posMap'];\n        const JSONstring = JSON.stringify(this, filteredFieldNames);\n        window.localStorage[savedGameStorageName] = JSONstring;\n        // console.log('JSONstring:', JSON.stringify(this, filteredFieldNames, 2));\n        \n    }\n\n    commonKeyHandler(key) {\n        // console.log(key);\n        if (this.state.gameOver) return;\n        if (key === '?') console.log('this.answer =', this.answer);\n        if (key === 'Backspace' && this.state.message != null) {\n            this.setState({message: null});\n        }\n        if (['Enter', '{enter}'].includes(key)) {\n            this.doInputSubmit();\n        }\n        else if (key === 'Backspace' && this.input.length > 0) {\n            this.input = this.input.slice(0, -1);\n            this.setState({ input: this.input });\n        }\n        else {\n            key = key.toUpperCase();\n            if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.includes(key)) {\n                this.input += key;\n                if (this.input.length > this.answer.length) {\n                    this.input = this.input.substring(0, this.answer.length);\n                    this.inputElem.value = this.input;\n                }\n                this.setState({ input: this.input });\n            }\n        }\n    }\n    \n    onVirtKeyPress(key) {\n        // console.log(\"Virt Key pressed\", key);\n        this.commonKeyHandler(key);\n    }\n\n    onRealKeyDown(event) {\n        let key = event.nativeEvent.key;\n        if (false) {\n            const msgtxt = `Real Key Down ${key}`;\n            this.logMsg = msgtxt;\n            console.log(msgtxt);\n            if (key === 'Enter') this.setMessage(msgtxt);\n        }\n        if (key === 'Enter' && this.input.length === this.answer.length) {\n            this.commonKeyHandler(key);\n        }\n    }\n\n    onInput(event) {\n        let key = null;\n        const natEvent = event.nativeEvent;\n        const targ = natEvent.target;\n        const newval = targ.value;\n        const inputType = natEvent.inputType;\n        if (['insertText',\n             'insertCompositionText',\n             'deleteContentBackward'].includes(inputType)) {\n            if (newval.length > this.input.length)\n                key = newval[newval.length - 1];\n            else if (newval.length < this.input.length) {\n                key = 'Backspace';\n            }\n        }\n        if (false) {\n            const msgtxt = `; onInput ${inputType} ${newval} ${key}`;\n            this.logMsg += msgtxt;\n            console.log(msgtxt);\n        }\n        if (key !== null) this.commonKeyHandler(key);\n    }\n\n    // called when focus leaves our input element so we can put it back\n    onBlur(event) {\n        if (this.inputElem) {\n            this.inputElem.focus();\n        }\n    }\n    \n    onChange(event) {\n        if (false) {\n            const natEvent = event.nativeEvent;\n            const targ = natEvent.target;\n            const newval = targ.value;\n            const inputType = natEvent.inputType;\n            const msgtxt =  `; onChange ${inputType} ${newval}`;\n            this.logMsg += msgtxt;\n            console.log(msgtxt);\n            this.setMessage(this.logMsg);\n            this.logMsg = '';\n            this.commonKeyHandler('Enter');\n        }\n    }\n\n    formatGuess(guessObj, submitted=false) {\n        let guessLine = [];\n        const guess = guessObj.guess;\n        for (let n=0; n < this.answer.length; n++) {\n            const chval = (n < guess.length ? guess[n] : nbsp);\n            // console.log('guessObj', guessObj);\n            const bgcolor = this.hintHandler.computeGuessCharColor(guessObj, n, chval, submitted);\n            guessLine.push(\n                <div key={n} style={{\n                    border: '1px solid black',\n                    backgroundColor: bgcolor,\n                    height: '20px',\n                    width: '20px',\n                    display: 'inline-block',\n                    marginLeft: '5px',\n                    marginBottom: '5px',\n                    marginTop: '5px',\n                    textAlign: 'center',\n                    // fontSize: '16px',\n                }}>\n                  {chval}\n                </div>\n            );\n        };\n        \n        // conditionally  show total exact and wrongplace\n        if (submitted) {\n            this.hintHandler.formatGuessTotals(guessObj, guessLine);\n        }\n        return guessLine;\n    }\n\n    getVirtKeyboard() {\n        if (!this.settings.useVirtKeyboard) return <Fragment></Fragment>;\n        return (\n            <Keyboard\n              keyboardRef={r => (this.keyboard = r)}\n              onKeyPress = {this.onVirtKeyPress.bind(this)}\n              onChange = {this.onChange.bind(this)}\n              theme={\"hg-theme-default hg-layout-default myTheme\"}\n              layoutName={this.state.layoutName}\n              layout={{\n                  default: [\n                      \"Q W E R T Y U I O P\",\n                      'A S D F G H J K L',\n                      \"Z X C V B N M {bksp} {enter}\",\n                  ]\n              }}\n              buttonTheme={[\n                  {\n                      class: \"hg-yellow\",\n                      buttons: this.yellowString,\n                  },\n                  {\n                      class: \"hg-green\",\n                      buttons: this.greenString,\n                  },\n                  {\n                      class: \"hg-grey\",\n                      buttons: this.greyString,\n                  }\n                  \n              ]}\n              display={{\n                  '{enter}' : 'enter',\n                  '{bksp}' : '<<',\n              }}\n            />\n        );\n    }\n\n    newGameButton() {\n        return (\n            <button\n              onClick = {this.startNewGame.bind(this)}\n              style = {{\n                  marginLeft: '5px',\n              }}\n            >\n              New\n            </button>\n        );\n    }\n    \n    buildGameOverMessage() {\n        const numGuesses = this.guessList.length;\n        const html = `Match after ${numGuesses} ${numGuesses === 1 ? 'guess' : 'guesses'}!`;\n\n        return {html: html,\n                bgcolor: 'white',\n               };\n    }\n    \n    setMessage(html, bgcolor='pink') {\n        const msgObj = {html, bgcolor};\n        // console.log('setMessage', msgObj);\n        this.setState({\n            message: msgObj,\n        });\n    }\n    \n     genMessageLine() {\n         // console.log('state.message', this.state.message);\n         if (this.state.message === null) return (<Fragment></Fragment>);\n         const buttonJsx = (this.state.message.msgButton === null ?\n                           (<Fragment></Fragment>) :\n                            this.state.message.msgButton);\n         return(\n             <div style={{backgroundColor : this.state.message.bgcolor}} >\n             {<>{this.state.message.html}</>} \n             {buttonJsx}\n             </div>\n         );\n    }\n\n    getPoolChars() {\n        return [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].filter((c) => this.notInPool[c] !== 1);\n    }\n    \n    render() {\n        // console.log('render', this.state);\n        if (!this.state || Object.keys(this.state).length === 0) return null;\n        this.hintHandler = HintHandler.getHintHandler(this);  // in case it got changed on settings change\n        this.yellowString = ' ';\n        this.greenString = ' ';\n        this.greyString = ' ';\n        this.notInPool = {};\n        let guessLines = [];\n        this.guessJsxIndex = 0;\n        this.state.guessList.forEach( (guessObj) => {\n            guessLines.push(<Fragment key={this.guessJsxIndex++}>{this.formatGuess(guessObj, true)}</Fragment>);\n            guessLines.push(<br key={this.guessJsxIndex++}/>);\n        });\n        // if game not over, push inputty line as well\n        if (!this.state.gameOver && this.state.input !== undefined) {\n            const newObj = {\n                guess: this.state.input,\n                posMap: new Array(this.settings.wordlen).fill(NOTUSE),\n            };\n            guessLines.push(this.formatGuess(newObj, false));\n        }\n\n        const poolLine = (this.state.guessList.length === 0 || this.gameOver ?\n                          <Fragment></Fragment> :\n                          <div>\n                            {`Pool: ${this.getPoolChars().join(' ')}`}\n                            <br/>\n                          </div>\n                         );\n\n        // const legalGuessCount = this.state.guessList.length;\n        // const illegalGuessCount = this.state.illegalGuessCount;\n        // let guessCountLine = `Guesses Legal: ${legalGuessCount}`;\n        // if (this.settings.countIllegalGuesses) guessCountLine = `${guessCountLine}, Illegal: ${illegalGuessCount}`;\n        // onChange={this.onChange.bind(this)}\n        const gamePage = () => {\n            return (\n                <Fragment>\n                  <div  style={{position:'relative'}}>\n                    <button\n                      style = {{\n                          marginRight: '10px',\n                      }}\n                      onClick = {() => this.setState({useGamePage:false})}\n                    >\n                      {String.fromCharCode(0x2699)}\n                    </button>\n                    {`WordGuess Game,   ${this.possibleList ? this.possibleList.length : 0} Possible`}\n                    <input\n                      type = 'text'\n                      style = {{opacity:0.05,\n                                marginLeft: '5px',\n                                fontSize: '1px',\n                                position: 'absolute',\n                                top: '0px',\n                                left: '30px',\n                               }}\n                      width = '100px'\n                      ref = {elem => this.inputElem = elem}\n                      tabIndex = {0}\n                      autoFocus\n                      onInput={this.onInput.bind(this)}\n                      onKeyDown = {this.onRealKeyDown.bind(this)}\n                      onBlur = {this.onBlur.bind(this)}\n                    />\n                  </div>\n                  <div>\n                    {guessLines}\n                    {this.genMessageLine()}\n                  </div>\n                  {poolLine}\n                  {(this.state.guesslist && this.state.guesslist.length === 0 ? (<Fragment></Fragment>) : this.newGameButton())}\n                  <br/>\n                  {this.getVirtKeyboard()}\n                </Fragment>\n            );\n        }\n\n        return (\n            this.state.useGamePage ?\n                gamePage() :\n                <SettingsPage  gameObj={this} inSettings={{...this.settings}}/>\n        );\n    }\n}\n\nexport {Game, EXACT, WRONG, NOTUSE, EXACTBIT, WRONGBIT, NOTUSEBIT};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from './Game.js';\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}