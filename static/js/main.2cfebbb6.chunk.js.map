{"version":3,"sources":["HintHandler.js","SettingsPage.js","Game.js","index.js"],"names":["nbsp","String","fromCharCode","HintHandler","gameObj","TypeError","undefined","this","computeGuessCharColor","constructor","name","formatGuessTotals","comparePosMaps","newGuess","gidx","guessList","length","guessObj","oldPosMap","posMap","newPosMap","doCompare","guess","errMsg","bits","settings","hintUsePolicy","val1","val2","UNKNOWN","noMarkGuessChars","HintHandlerShowTotals","HintHandlerMarkChars","pos","chval","submitted","bgcolor","EXACT","greenString","WRONG","yellowString","getMarkedCount","greyString","notInPool","guessLine","searchChr","count","Array","from","forEach","chr","idx","NOTUSE","oldGuess","newCode","oldCode","oldChr","policyIncludes","NOTUSEBIT","usesStr","WRONGBIT","len","hasUnknowns","genErrMsg","tstPosMap","basePosMap","every","val","index","type","borderRadius","height","width","display","marginLeft","marginBottom","textAlign","backgroundColor","countVals","exlen","wplen","push","style","styleForTotals","counts","oldcounts","newcounts","oldval","newval","exact","wrong","yellowSpan","countKnownVals","oldE","oldW","newE","newW","genCountSpans","tstE","tstW","baseE","baseW","SettingsPage","state","settingName","setState","checked","onChange","updateSettings","props","id","float","labeltext","key","switchKey","fontSize","getSwitch","min","max","value","border","input","groupName","selectVal","text","isHorizontal","lineBreak","parseInt","event","target","groupHeaderText","optsArray","optsJsxArray","map","optset","genRadioSetting","marginRight","onClick","useGamePage","field","inSettings","startNewGame","genRadioGroupSetting","genSwitchSetting","wordlen","EXACTBIT","Component","savedGameFields","Game","savedGameJSON","window","localStorage","getItem","restoreSavedState","setDefaultGameState","initReactState","isMobile","document","documentElement","console","log","guessMustBeWord","useVirtKeyboard","allowPlurals","startWithReveal","answer","inputElem","React","createRef","usedDefaultGameState","totalGuesses","message","layoutName","letterMap","a","savedGame","JSON","parse","setInputs","hintHandler","getHintHandler","tempAlert","prevDataLength","gameOver","buildGameOverMessage","buildWordList","possibleList","wordList","getNewPossibleList","possibleListLen","msg","duration","el","createElement","setAttribute","innerHTML","setTimeout","parentNode","removeChild","body","appendChild","Promise","resolve","Math","floor","random","toUpperCase","inputAry","fill","revealPos","findRevealPos","join","curAnswerLen","URL","fetch","data","split","word","base","gchars","bchars","gchar","indexOf","slice","baseInput","filter","possibleListFilter","str","legalGuess","includes","addon","endsWith","setMessage","messageJsx","checkUseAllHints","keyboard","clearInput","illegalGuessCount","filteredFieldNames","Object","keys","JSONstring","stringify","doInputSubmit","substring","commonKeyHandler","nativeEvent","natEvent","inputType","focus","maxLength","ch","newList","n","marginTop","keyboardRef","r","onKeyPress","onVirtKeyPress","bind","theme","layout","default","buttonTheme","class","buttons","legalGuessCount","guessesText","newGameButton","numGuesses","html","msgObj","buttonJsx","msgButton","c","guessLines","guessJsxIndex","formatGuess","newObj","poolLine","getPoolChars","position","opacity","top","left","ref","elem","tabIndex","autoFocus","onInput","onKeyDown","onRealKeyDown","onBlur","genMessageLine","newButtonLine","getVirtKeyboard","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2cfebbb6.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\nimport {EXACT, WRONG, NOTUSE, UNKNOWN, WRONGBIT, NOTUSEBIT} from './Game.js';\n\nconst nbsp = String.fromCharCode(160);\n\n// abstract class for the different ways of handling hints\nclass HintHandler {\n    constructor(gameObj) {\n        if (new.target === HintHandler) {\n            throw new TypeError('cannot instantiate HintHandler class');\n        }\n        // some methods must be overridden\n        if (this.computeGuessCharColor === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement computeGuessCharColor method`);\n        }\n        if (this.formatGuessTotals === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement formatGuessTotals method`);\n        }\n        if (this.comparePosMaps === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement comparePosMaps method`);\n        }\n        this.gameObj = gameObj;\n    }\n\n    static getHintHandler(gameObj) {\n        return (gameObj.settings.noMarkGuessChars ? new HintHandlerShowTotals(gameObj) : new HintHandlerMarkChars(gameObj));\n    }\n    \n    //framework for checking all hints\n    checkUseAllHints(newGuess) {\n        // for each previous guess, going backwards, see if our guess would produce a similar result\n        for (let gidx = this.gameObj.guessList.length-1; gidx >= 0; gidx--) {\n            const guessObj = this.gameObj.guessList[gidx];\n            const oldPosMap = guessObj.posMap;\n            // get compare info for that guess vs. our new guess\n            const newPosMap = this.gameObj.doCompare(guessObj.guess, newGuess);\n            const errMsg = this.comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj);\n            if (errMsg !== '') return errMsg;\n        }\n        return null; // if we got this far\n    }\n\n    policyIncludes(bits) {\n        // console.log('policyIncludes', this.gameObj.settings.hintUsePolicy, bits);\n        return ((this.gameObj.settings.hintUsePolicy & bits) !== 0)\n    }\n\n    hasUnknowns(val1, val2) {\n        return (val1 === UNKNOWN && val2 === UNKNOWN);\n    }\n}\n\n// class for handling hints by marking chars\nclass HintHandlerMarkChars extends HintHandler{\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        let bgcolor = 'white'; // default\n        if (guessObj.posMap[pos] === EXACT) {\n            bgcolor = 'lightgreen';\n            this.gameObj.greenString += ` ${chval}`;\n        }\n        else if (guessObj.posMap[pos] === WRONG) {\n            bgcolor = 'yellow';\n            this.gameObj.yellowString += ` ${chval}`;\n        }\n        else if (submitted) {\n            const markedCount = this.getMarkedCount(guessObj.guess, guessObj.posMap, chval);\n            if (markedCount === 0) {\n                this.gameObj.greyString += ` ${chval}`;\n                this.gameObj.notInPool[chval] = 1;\n            }\n        }\n        return bgcolor;\n    }\n\n    // in this handler, we don't show anything at end of line\n    formatGuessTotals(guessObj, guessLine) {\n    }\n\n    getMarkedCount(guess, posMap, searchChr) {\n        let count = 0;\n        Array.from(guess).forEach( (chr, idx) => {\n            count += (posMap[idx] !== NOTUSE && chr === searchChr) ? 1 : 0;\n        });\n        return count;\n    }\n    \n    genErrMsg(newPosMap, oldPosMap, pos, newGuess, oldGuess) {\n        const newCode = newPosMap[pos];\n        const oldCode = oldPosMap[pos];\n        const oldChr = oldGuess[pos];\n        // we know policy at least includes EXACT\n        if (oldCode === EXACT) return `chr ${pos+1} must be ${oldChr}, `;\n        if (this.policyIncludes(NOTUSEBIT) && oldCode === NOTUSE) {\n            // see if oldChr is used in EXACT or WRONG to adjust errmsg\n            const count = this.getMarkedCount(oldGuess, oldPosMap, oldChr);\n            const usesStr = (count === 1 ? 'use' :'uses');\n            return (count === 0 ?\n                    `must not use ${oldChr}, ` :\n                    `only ${count} ${usesStr} of ${oldChr}, `);\n        }\n        if (this.policyIncludes(WRONGBIT)&& oldCode === WRONG){\n            if (newCode === EXACT) return `chr ${pos+1} must not be ${oldChr}, `;\n            if (newCode === NOTUSE) return `must use ${oldChr} somewhere, `;\n        }\n        return '';\n    }\n\n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        // console.log(`${guessObj.guess}, ${newPosMap}, ${oldPosMap}`);\n        const len = newGuess.length;\n        let errMsg = '';\n        for (let pos=0; pos<len; pos++) {\n            const newCode = newPosMap[pos];\n            const oldCode = oldPosMap[pos];\n            if (!this.hasUnknowns(newCode, oldCode) && newCode !== oldCode) {\n                // errMsg += `chr ${pos+1} ${newCode} !== ${oldCode}, `;\n                errMsg += this.genErrMsg(newPosMap, oldPosMap, pos, newGuess, guessObj.guess);\n            }\n        }\n        if (errMsg.length > 0) errMsg += `see ${guessObj.guess}`;\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        return tstPosMap.every((val, index) => val === basePosMap[index] || this.hasUnknowns(val, basePosMap[index]));\n    }\n}\n\n// class for handling hints by just showing totals (harder)\nclass HintHandlerShowTotals extends HintHandler{\n    // when we are not marking guess chars, we only know notInPool\n    // which is the special case when no green or yellow\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        const bgcolor = 'white';\n        if (submitted && (guessObj.posMap.every(val => val === NOTUSE))) {\n            this.gameObj.notInPool[chval] = 1;\n        }\n        return bgcolor;\n    }\n\n    styleForTotals(type) {\n        return {\n            borderRadius: '50%',\n            height: '20px',\n            width: '20px',\n            display: 'inline-block',\n            marginLeft: '10px',\n            marginBottom: '5px',\n            textAlign: 'center',\n            backgroundColor: (type === EXACT ? 'lightgreen' : 'yellow'),\n        };\n    }\n    \n    // in this handler we do show totals at end of guess line\n    formatGuessTotals(guessObj, guessLine) {\n        const [exlen, wplen] = this.countVals(guessObj.posMap);\n        [EXACT, WRONG].forEach(type => {\n            const chval = (type===EXACT ? exlen : wplen);\n            guessLine.push(\n                <div style={this.styleForTotals(type)} >\n                  {chval}\n                </div>\n            );\n        });\n    }\n    \n    countVals(posMap) {\n        let counts = Array.from([0, 0, 0, 0]);\n        posMap.forEach(val => counts[val-1]++);\n        return counts;\n    }\n\n    countKnownVals(oldPosMap, newPosMap) {\n        let oldcounts = Array.from([0,0,0,0]);\n        let newcounts = Array.from([0,0,0,0]);\n        for (let idx=0; idx < oldPosMap.length; idx++) {\n            const oldval = oldPosMap[idx];\n            const newval = newPosMap[idx];\n            if (!this.hasUnknowns(oldval, newval)) {\n                oldcounts[oldval-1]++;\n                newcounts[newval-1]++;\n            }\n        }\n        return [oldcounts[0], oldcounts[1], newcounts[0], newcounts[1]];\n    }\n\n    genCountSpans(exact, wrong) {\n        const yellowSpan = (!this.policyIncludes(WRONGBIT) ? '' : (\n              <span style={this.styleForTotals(WRONG)}>\n                {wrong}\n              </span>\n        ));            \n        return (\n            <Fragment>\n              <span style={this.styleForTotals(EXACT)}>\n                {exact}\n              </span>\n              {yellowSpan}\n            </Fragment>\n        );\n    }\n    \n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        const [oldE, oldW, newE, newW] = this.countKnownVals(oldPosMap, newPosMap);\n        let errMsg = '';\n        if (oldE !== newE || (this.policyIncludes(WRONGBIT) && oldW !== newW)) {\n            // console.log(this.gameObj.settings.hintUsePolicy, oldE, oldW, newE, newW);\n            errMsg = (\n                <Fragment>\n                  {`from ${guessObj.guess}, need `}\n                  {this.genCountSpans(oldE, oldW)}\n                  {`,${nbsp}${nbsp}not `}\n                  {this.genCountSpans(newE, newW)}\n                </Fragment>\n            );\n        }\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        const [tstE, tstW, baseE, baseW] = this.countKnownVals(tstPosMap, basePosMap);\n        return (tstE === baseE && tstW === baseW);\n    }\n    \n}\n\nexport {HintHandler};\n\n","import React, { Component, Fragment } from \"react\";\nimport NumericInput from \"react-numeric-input\";\nimport {EXACTBIT, WRONGBIT, NOTUSEBIT} from './Game.js';\nconst nbsp = String.fromCharCode(160);\n\nclass SettingsPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            settings : {},\n        };\n    }\n    \n    updateSettings(settingName, newval) {\n        // update the settings (which is shared between Game and us\n        // and set the state so we re-render\n        this.settings[settingName] = newval;\n        this.setState({settings: this.settings});\n    }\n    \n    getSwitch(settingName) {\n        if (true) return (\n            <input\n              type=\"checkbox\"\n              checked={this.settings[settingName]}\n              onChange= {() => this.updateSettings(settingName, !this.props.gameObj.settings[settingName])}\n              id={settingName}\n              height={15}\n              width={30}\n              style={{float: 'left'}}\n            />\n        )\n    }\n    \n    // <div align='right' style={{display:'inline-block', textAlign:'right'}}>\n    genSwitchSetting(settingName, labeltext) {\n        return (\n            <div key={this.switchKey++} style={{float: 'left', width:'300px'}}>\n            <span style={{fontSize:'14px'}} >{`${labeltext}${nbsp}${nbsp}`} </span>\n              <div style={{float: 'right'}} >\n                {this.getSwitch(settingName)}\n              </div>\n              <br/>\n            </div>\n        );\n    \n    }\n\n    genNumericInputSetting(settingName, labeltext) {\n        return (\n            <div style={{float: 'left', width:'320px'}}>\n              <span style={{fontSize:'14px'}} >\n                {labeltext}\n              </span>\n              <div style={{float:'right'}}>\n                <NumericInput\n                  id={settingName}\n                  min={5}\n                  max={8}\n                  value={this.settings[settingName] || \"\"} \n                  onChange={(val) => this.updateSettings(settingName, val)}\n                  style = {{\n                      border: '1px solid black',\n                      input: {\n                          marginLeft: '5px',\n                          height: '18px',\n                          width: '40px',\n                      },\n                  }}\n                >\n                </NumericInput>\n              </div>\n            </div>\n        );\n    } \n\n    genRadioSetting(groupName, selectVal, text, index, isHorizontal) {\n        // console.log('genRadioSetting', groupName, selectVal, text, isHorizontal);\n        const lineBreak = (isHorizontal ? '' : <br/>);\n        return (\n            <Fragment>\n              <input\n                type=\"radio\"\n                value={parseInt(selectVal)}\n                name={groupName}\n                key={index}\n                checked={this.settings[groupName] === parseInt(selectVal)}\n                style = {{marginLeft: '15px'}}\n                onChange={(event) => {\n                    const name = event.target.name;\n                    const val = parseInt(event.target.value);\n                    this.updateSettings(name, val);\n                    // console.log('onChange for Radio', name, val, this.settings, event);\n                }}\n              />\n              {text}\n              {lineBreak}\n            </Fragment>\n        );\n    }\n\n    genRadioGroupSetting(groupName, groupHeaderText, optsArray, isHorizontal=false) {\n        // generate the radio options section\n        // optsArray is a set of text, val pairs\n        const optsJsxArray = optsArray.map((optset, index) => {\n            const [text, val] = optset;\n            return this.genRadioSetting(groupName, val, text, index, isHorizontal);\n        });\n        return (\n            <Fragment>\n              {groupHeaderText}\n              <br/>\n              <div\n                value = {this.settings[groupName]}\n              >\n                {optsJsxArray}\n              </div>\n            </Fragment>\n        );\n    }\n\n    render() {\n        this.gameObj = this.props.gameObj;\n        this.settings = this.gameObj.settings;  // shares the Game settings\n        this.switchKey = 0;\n        return (\n            // first is button to return to game\n            <div>\n              <button\n                style = {{\n                    marginRight: '10px',\n                    marginBottom: '5px',\n                }}\n                onClick = {() => {\n                    this.gameObj.setState({useGamePage:true});\n                    // check if any settings changed which require a new game\n                    const critSettings = ['wordlen', 'allowPlurals'];\n                    critSettings.forEach( field => {\n                        if (this.props.inSettings[field] !== this.settings[field]) {\n                            this.gameObj.startNewGame();\n                        }\n                    });\n                }}\n                \n              >\n                {String.fromCharCode(0x2b05)}\n              </button>\n              Settings (* changes will start new Game)\n              <br/>\n              <div style={{width:'300px', display:'inline-block', fontSize:'14px'}}>\n                {this.genRadioGroupSetting('wordlen', 'Word Length (longer=harder) *', [\n                    ['5', 5], ['6', 6], ['7', 7], ['8', 8],\n                ], true)}\n                <br/>\n                {this.genSwitchSetting('guessMustBeWord', 'Guess must be word? (harder)') }\n                {this.genSwitchSetting('noMarkGuessChars', 'Not Mark Guess Chars? (much harder)') }\n                {this.genSwitchSetting('allowPlurals', `Allow Plurals of ${this.settings.wordlen - 1} letter words? (easier) *`) }\n                {this.genSwitchSetting('startWithReveal', `Start with 1-letter Reveal? (easier)`) }\n                {false && this.genSwitchSetting('countIllegalGuesses', 'Count Illegal Guesses?') }\n                {this.genSwitchSetting('useVirtKeyboard', 'Use Virtual Keyboard?') }\n                {this.genRadioGroupSetting('hintUsePolicy', 'Hint Reuse Requirements', [\n                    ['None (most flexible)', 0],\n                    ['Must Reuse Green (slightly harder)', EXACTBIT],\n                    ['Must Reuse Green and Yellow (harder)', EXACTBIT+WRONGBIT],\n                    ['Must Reuse All Hints (hardest and annoying)', EXACTBIT+WRONGBIT+NOTUSEBIT]\n                ])}\n                \n              </div>\n            </div>\n        );\n    }\n}\n\nexport {SettingsPage};\n","import React, { Component, Fragment } from \"react\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {HintHandler} from './HintHandler.js';\nimport {SettingsPage} from './SettingsPage.js';\n\n// import * as _ from 'underscore';\nimport \"./index.css\";\n\nconst nbsp = String.fromCharCode(160);\nconst [EXACT, WRONG, NOTUSE, UNKNOWN] = [1,2,3,4];\nconst [EXACTBIT, WRONGBIT, NOTUSEBIT] = [2,4,8];\nconst WILDCHAR = '?';\nconst savedGameStorageName = 'wordguessSavedGame';\n// list of fields from the this that we will save\nconst savedGameFields = [\n    'settings',\n    'answer',\n    'guessList',\n    'gameOver',\n    'message',\n    'totalGuesses',\n    'input',\n];\n\n\nclass Game extends Component {\n    constructor() {\n        super();\n        // uncomment to get rid of old storage item (eg, if new format needed)\n        // window.localStorage.removeItem(savedGameStorageName);\n        const savedGameJSON = window.localStorage.getItem(savedGameStorageName);\n        // console.log('savedGameJSON:', savedGameJSON);\n        if (savedGameJSON) {\n            this.restoreSavedState(savedGameJSON);\n        } else {\n            this.setDefaultGameState();\n        }\n        // can setup state directly here since in constructor\n        this.state = this.initReactState;\n        this.isMobile = ('ontouchstart' in document.documentElement);\n    }\n\n    setDefaultGameState() {\n        console.log('setting default game state');\n        // default settings\n        this.settings = {\n            wordlen: 5,\n            guessMustBeWord : true,\n            noMarkGuessChars : false,            \n            hintUsePolicy : EXACTBIT,\n            useVirtKeyboard: false,\n            allowPlurals: false,\n            startWithReveal: false,\n        };\n        this.answer = '';\n        this.inputElem = React.createRef();\n        this.usedDefaultGameState = true;\n        this.totalGuesses = 0;\n        this.message = '';\n        // return the state that the constructor will put in this.state directly\n        this.initReactState = {\n            layoutName: \"default\",\n            input: \"\",\n            letterMap: {},\n            guessList: [],\n            useGamePage : false,   // enforce settings for very first time thru\n            settings: this.settings,\n            message: this.message,\n            totalGuesses: this.totalGuesses,\n        };\n    }\n\n    async restoreSavedState(savedGameJSON) {\n        const savedGame = JSON.parse(savedGameJSON);\n        savedGameFields.forEach( (field) => this[field] = savedGame[field]);\n        // this.inputElem = React.createRef();\n        this.setInputs(this.input);\n        this.hintHandler = HintHandler.getHintHandler(this);\n        this.usedDefaultGameState = false;\n        // notInPool will be rebuilt on each render so no need to restore here\n        this.tempAlert('Restored Saved Game State', 1500);\n        this.prevDataLength = 0;\n        // return the state that the constructor will put in this.state directly\n        this.initReactState = {\n            layoutName: \"default\",\n            letterMap: {},\n            useGamePage : true,   // since we saved things while in gamepage\n            settings: this.settings,\n            input: this.input,\n            gameOver: this.gameOver,\n            totalGuesses: this.totalGuesses,\n            guessList: this.guessList,\n            message: (this.gameOver ? this.buildGameOverMessage() : this.message),                       \n        };\n\n        // reconstruct the longer wordList and possibleList\n        await this.buildWordList(this.settings.wordlen);\n        // reconstruct possibleList from guessList (so we didn't have to save the whole possibleList)\n        this.possibleList = Array.from(this.wordList);\n        this.guessList.forEach((guessObj) => {\n            this.possibleList = this.getNewPossibleList(guessObj.guess, guessObj.posMap);\n        });\n        this.setState({possibleListLen: this.possibleList.length});\n    }\n    \n    tempAlert(msg,duration,bgcolor='red') {\n        // console.log(msg);\n        var el = document.createElement(\"div\");\n        el.setAttribute(\"style\", `position:absolute;\\\n                             top:0%; left:10%; \\\n                             background-color:${bgcolor}; \\\n                             border-color:black; \\\n                             border-width:1px; \\\n                             `);\n        el.innerHTML = msg;\n        setTimeout(function(){\n            el.parentNode.removeChild(el);\n        },duration);\n        document.body.appendChild(el);\n        return new Promise(resolve => setTimeout(resolve,duration));\n    }\n    \n    async componentDidMount() {\n        if (this.usedDefaultGameState) this.startNewGame();\n    }\n    \n    componentDidUpdate() {\n    }\n\n    async startNewGame() {\n        this.guessList = [];\n        this.setInputs('');\n        this.hintHandler = HintHandler.getHintHandler(this);\n        await this.buildWordList(this.settings.wordlen);\n        this.possibleList = Array.from(this.wordList);\n        this.answer = this.wordList[Math.floor(Math.random() * this.wordList.length)].toUpperCase();\n        // this.answer = 'REDOX';\n        this.totalGuesses = 0;\n        if (this.settings.startWithReveal) {\n            const inputAry = Array(this.settings.wordlen).fill(WILDCHAR);\n            const revealPos = this.findRevealPos();\n            inputAry[revealPos] = this.answer[revealPos];\n            this.setInputs(inputAry.join(''));\n            const posMap = this.doCompare(this.input, this.answer);\n            this.guessList.push({\n                guess: this.input,\n                index : this.guessList.length,\n                posMap,\n            });\n            this.possibleList = this.getNewPossibleList(this.input, posMap);\n            this.setInputs('');\n            this.totalGuesses = 1;\n        }\n        // console.log('this.answer =', this.answer);\n        this.gameOver = false;\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n            gameOver: false,\n            totalGuesses: this.totalGuesses,\n            message: null,\n        });\n        this.prevDataLength = 0;\n    }\n    \n    async buildWordList(wordlen, allowPlurals=this.settings.allowPlurals) {\n        if (wordlen === this.curAnswerLen) return;\n        this.curAnswerLen = wordlen;\n        const URL = `/wordguess/ospd${allowPlurals ? '' : 'np'}${wordlen}.txt`;\n        // console.log('URL', URL);\n        const data = await fetch(URL);\n        console.log('fetch complete');\n        const text = await data.text();\n        // console.log('data.text() complete');\n        // console.log(text);\n        this.wordList = await text.split('\\n');\n        this.wordList = await this.wordList.map(word => word.toUpperCase());\n        console.log(`wordlist for len ${wordlen} built`);\n    }\n\n    doCompare(guess, base) {\n        let gchars = [...guess];\n        let bchars = [...base];\n        let posMap = new Array(this.settings.wordlen).fill(NOTUSE);\n        // first do exact matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar === bchars[index]) {\n                bchars[index] = null;\n                gchars[index] = null;\n                posMap[index] = EXACT;\n            }\n            else if (bchars[index] === WILDCHAR || gchar === WILDCHAR) {\n                posMap[index] = UNKNOWN;\n            }\n        });\n        // then do any more matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar !== null) {\n                const pos = bchars.indexOf(gchar);\n                if (pos >= 0) {\n                    bchars[pos] = null;\n                    posMap[index] = WRONG;\n                }\n            }\n        });\n        return posMap;\n    }\n\n    mostRecentGuess() {\n        return (this.guessList.length > 0 ? this.guessList.slice(-1)[0] : null);\n    }\n    \n\n    getNewPossibleList(baseInput, basePosMap) {\n        return this.possibleList.filter(word => {\n            const tstPosMap = this.doCompare(baseInput, word);\n            const ok = this.hintHandler.possibleListFilter(tstPosMap, basePosMap);\n            // if (ok) console.log(word, tstPosMap, basePosMap);\n            return ok;\n        });\n    }\n\n    setInputs(str) {\n        this.input = str;\n        if (this.inputElem) this.inputElem.value = str;\n    }\n    \n    async doInputSubmit() {\n        let legalGuess = true;  // assume this\n        if (this.input.length !== this.answer.length) return;\n        this.totalGuesses++;\n        // console.log('usedHintsObj', usedHintsObj);\n        if (this.settings.guessMustBeWord && !this.wordList.includes(this.input)) {\n            // await this.tempAlert('Guess must be a Legal Scrabble Word', 1500);\n            const addon = (this.input.endsWith('S') && !this.settings.allowPlurals ? ', plurals are disabled' : '');\n            this.setMessage(`Guess must be in wordlist${addon}`);\n            legalGuess = false;\n        }\n        else if (this.settings.hintUsePolicy !== 0 && this.guessList.length > 0) {\n            const messageJsx = this.hintHandler.checkUseAllHints(this.input);\n            if (messageJsx) {\n                // console.log('messageJsx', messageJsx);\n                this.setMessage(messageJsx, 'rgb(230,230,230)');\n                legalGuess = false;\n            }\n        }\n        if (legalGuess) {    \n            // guess is legal, see how right it is\n            const posMap = this.doCompare(this.input, this.answer);\n            this.guessList.push({\n                guess: this.input,\n                index : this.guessList.length,\n                posMap,\n            });\n            this.possibleList = this.getNewPossibleList(this.input, posMap);\n            // console.log(this.possibleList);\n            \n            if (posMap.every(val => val === EXACT)) {\n                this.gameOver = true;\n                this.setState(\n                    {gameOver:true,\n                     message: this.buildGameOverMessage(),\n                    });\n            }\n        }\n        // clean up input for the next time thru\n        if (legalGuess) {\n            this.setInputs('');\n            if (this.settings.useVirtKeyboard) this.keyboard.clearInput();\n        }\n        else {\n            this.illegalGuessCount++;\n            this.setState({\n                totalGuesses: this.totalGuesses,\n            });\n        }\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n        });\n\n        // handle the fact that embedded objects need their fields in the list\n        // the last fields are from guessList objects (shown explicitly in case the list is empty)\n        const filteredFieldNames =  [...savedGameFields, ...Object.keys(this.settings), 'guess', 'index', 'posMap'];\n        const JSONstring = JSON.stringify(this, filteredFieldNames);\n        window.localStorage[savedGameStorageName] = JSONstring;\n        // console.log('JSONstring:', JSON.stringify(this, filteredFieldNames, 2));\n    }\n\n    commonKeyHandler(key) {\n        // console.log(key);\n        if (this.state.gameOver) return;\n        if (key === '?') console.log('this.answer =', this.answer);\n        if (key === 'Backspace' && this.state.message != null) {\n            this.setState({message: null});\n        }\n        if (['Enter', '{enter}'].includes(key)) {\n            this.doInputSubmit();\n        }\n        else if (key === 'Backspace' && this.input.length > 0) {\n            this.setInputs(this.input.slice(0, -1));\n            this.setState({ input: this.input });\n        }\n        else {\n            key = key.toUpperCase();\n            if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.includes(key)) {\n                this.setInputs(this.input + key);\n                if (this.input.length > this.answer.length) {\n                    this.setInputs(this.input.substring(0, this.answer.length));\n                }\n                this.setState({ input: this.input });\n            }\n        }\n    }\n    \n    onVirtKeyPress(key) {\n        // console.log(\"Virt Key pressed\", key);\n        this.commonKeyHandler(key);\n    }\n\n    onRealKeyDown(event) {\n        let key = event.nativeEvent.key;\n        if (false) {\n            const msgtxt = `Real Key Down ${key}`;\n            this.logMsg = msgtxt;\n            console.log(msgtxt);\n            if (key === 'Enter') this.setMessage(msgtxt);\n        }\n        if (key === 'Enter' && this.input.length === this.answer.length) {\n            this.commonKeyHandler(key);\n        }\n    }\n\n    onInput(event) {\n        let key = null;\n        const natEvent = event.nativeEvent;\n        const targ = natEvent.target;\n        const newval = targ.value;\n        const inputType = natEvent.inputType;\n        if (['insertText',\n             'insertCompositionText',\n             'deleteContentBackward'].includes(inputType)) {\n            if (newval.length > this.input.length)\n                key = newval[newval.length - 1];\n            else if (newval.length < this.input.length) {\n                key = 'Backspace';\n            }\n        }\n        if (false) {\n            const msgtxt = `; onInput ${inputType} ${newval} ${key}`;\n            this.logMsg += msgtxt;\n            console.log(msgtxt);\n        }\n        if (key !== null) this.commonKeyHandler(key);\n    }\n\n    // called when focus leaves our input element so we can put it back\n    onBlur(event) {\n        if (this.inputElem) {\n            this.inputElem.focus();\n        }\n    }\n    \n    onChange(event) {\n        if (false) {\n            const natEvent = event.nativeEvent;\n            const targ = natEvent.target;\n            const newval = targ.value;\n            const inputType = natEvent.inputType;\n            const msgtxt =  `; onChange ${inputType} ${newval}`;\n            this.logMsg += msgtxt;\n            console.log(msgtxt);\n            this.setMessage(this.logMsg);\n            this.logMsg = '';\n            this.commonKeyHandler('Enter');\n        }\n    }\n\n    findRevealPos() {\n        let maxLength = 0;\n        let revealPos = 0;\n        [...this.answer].forEach( (ch, index) => {\n            // skip if in mark chars mode and char is already green\n            const shouldSkip = (!this.settings.noMarkGuessChars &&\n                                this.guessList.length > 0 &&\n                                this.guessList[this.guessList.length - 1].posMap[index] === EXACT);\n            if (!shouldSkip) {\n                const newList = this.possibleList.filter( (word) => word[index] === ch);\n                console.log(`knowing ${ch} at pos ${index} reduces possibleList from ${this.possibleList.length} to ${newList.length}`);\n                if (newList.length > maxLength) {\n                    maxLength = newList.length;\n                    revealPos = index;\n                }\n            }\n        });\n        return revealPos;\n    }\n    \n    formatGuess(guessObj, submitted=false) {\n        let guessLine = [];\n        const guess = guessObj.guess;\n        for (let n=0; n < this.answer.length; n++) {\n            const chval = (n < guess.length ? guess[n] : nbsp);\n            // console.log('guessObj', guessObj);\n            const bgcolor = this.hintHandler.computeGuessCharColor(guessObj, n, chval, submitted);\n            guessLine.push(\n                <div key={n} style={{\n                    border: '1px solid black',\n                    backgroundColor: bgcolor,\n                    height: '20px',\n                    width: '20px',\n                    display: 'inline-block',\n                    marginLeft: '5px',\n                    marginBottom: '5px',\n                    marginTop: '5px',\n                    textAlign: 'center',\n                    // fontSize: '16px',\n                }}>\n                  {chval}\n                </div>\n            );\n        };\n        \n        // conditionally  show total exact and wrongplace\n        if (submitted) {\n            this.hintHandler.formatGuessTotals(guessObj, guessLine);\n        }\n        return guessLine;\n    }\n\n    getVirtKeyboard() {\n        if (!this.settings.useVirtKeyboard) return <Fragment></Fragment>;\n        return (\n            <Keyboard\n              keyboardRef={r => (this.keyboard = r)}\n              onKeyPress = {this.onVirtKeyPress.bind(this)}\n              onChange = {this.onChange.bind(this)}\n              theme={\"hg-theme-default hg-layout-default myTheme\"}\n              layoutName={this.state.layoutName}\n              layout={{\n                  default: [\n                      \"Q W E R T Y U I O P\",\n                      'A S D F G H J K L',\n                      \"Z X C V B N M {bksp} {enter}\",\n                  ]\n              }}\n              buttonTheme={[\n                  {\n                      class: \"hg-yellow\",\n                      buttons: this.yellowString,\n                  },\n                  {\n                      class: \"hg-green\",\n                      buttons: this.greenString,\n                  },\n                  {\n                      class: \"hg-grey\",\n                      buttons: this.greyString,\n                  }\n                  \n              ]}\n              display={{\n                  '{enter}' : 'enter',\n                  '{bksp}' : '<<',\n              }}\n            />\n        );\n    }\n\n    newGameButton() {\n        return (\n            <button\n              onClick = {this.startNewGame.bind(this)}\n              style = {{\n                  marginLeft: '5px',\n                  marginRight: '10px',\n              }}\n            >\n              New\n            </button>\n        );\n    }\n\n    newButtonLine() {\n        let legalGuessCount = this.state.guessList.length;\n        if (this.settings.startWithReveal) legalGuessCount--;\n        const guessesText = (this.totalGuesses === 0 ? '' :\n                             `Guesses: ${this.totalGuesses}, (${legalGuessCount} Legal)`);\n              \n        return (\n            <Fragment>\n              {this.newGameButton()}\n                {guessesText}\n            </Fragment>\n        );\n    }\n    \n    buildGameOverMessage() {\n        const numGuesses = this.guessList.length;\n        const html = `Match after ${numGuesses} ${numGuesses === 1 ? 'guess' : 'guesses'}!`;\n\n        return {html: html,\n                bgcolor: 'white',\n               };\n    }\n    \n    setMessage(html, bgcolor='pink') {\n        const msgObj = {html, bgcolor};\n        // console.log('setMessage', msgObj);\n        this.setState({\n            message: msgObj,\n        });\n    }\n    \n     genMessageLine() {\n         // console.log('state.message', this.state.message);\n         if (this.state.message === null) return (<Fragment></Fragment>);\n         const buttonJsx = (this.state.message.msgButton === null ?\n                           (<Fragment></Fragment>) :\n                            this.state.message.msgButton);\n         return(\n             <div style={{backgroundColor : this.state.message.bgcolor}} >\n             {<>{this.state.message.html}</>} \n             {buttonJsx}\n             </div>\n         );\n    }\n\n    getPoolChars() {\n        return [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].filter((c) => this.notInPool[c] !== 1);\n    }\n    \n    render() {\n        // console.log('render', this.state);\n        if (!this.state || Object.keys(this.state).length === 0) return null;\n        this.hintHandler = HintHandler.getHintHandler(this);  // in case it got changed on settings change\n        this.yellowString = ' ';\n        this.greenString = ' ';\n        this.greyString = ' ';\n        this.notInPool = {};\n        let guessLines = [];\n        this.guessJsxIndex = 0;\n        this.state.guessList.forEach( (guessObj) => {\n            guessLines.push(<Fragment key={this.guessJsxIndex++}>{this.formatGuess(guessObj, true)}</Fragment>);\n            guessLines.push(<br key={this.guessJsxIndex++}/>);\n        });\n        // sync up this.input and this.inputElem.value\n        this.setInputs(this.input);\n        // if game not over, push inputty line as well\n        if (!this.state.gameOver && this.state.input !== undefined) {\n            const newObj = {\n                guess: this.state.input,\n                posMap: new Array(this.settings.wordlen).fill(NOTUSE),\n            };\n            guessLines.push(this.formatGuess(newObj, false));\n        }\n\n        const poolLine = (this.state.guessList.length === 0 || this.gameOver ?\n                          <Fragment></Fragment> :\n                          <div>\n                            {`Pool: ${this.getPoolChars().join(' ')}`}\n                            <br/>\n                          </div>\n                         );\n\n        const gamePage = () => {\n            return (\n                <Fragment>\n                  <div  style={{position:'relative'}}>\n                    <button\n                      style = {{\n                          marginRight: '10px',\n                      }}\n                      onClick = {() => this.setState({useGamePage:false})}\n                    >\n                      {String.fromCharCode(0x2699)}\n                    </button>\n                    {`WordGuess Game,   ${this.possibleList ? this.possibleList.length : 0} Possible`}\n                    <input\n                      type = 'text'\n                      style = {{opacity:0.05,\n                                marginLeft: '5px',\n                                fontSize: '1px',\n                                position: 'absolute',\n                                top: '0px',\n                                left: '30px',\n                               }}\n                      width = '100px'\n                      ref = {elem => this.inputElem = elem}\n                      tabIndex = {0}\n                      autoFocus\n                      onInput={this.onInput.bind(this)}\n                      onKeyDown = {this.onRealKeyDown.bind(this)}\n                      onBlur = {this.onBlur.bind(this)}\n                    />\n                  </div>\n                  <div>\n                    {guessLines}\n                    {this.genMessageLine()}\n                  </div>\n                  {poolLine}\n                  {this.newButtonLine()}\n                  <br/>\n                  {this.getVirtKeyboard()}\n                </Fragment>\n            );\n        }\n\n        return (\n            this.state.useGamePage ?\n                gamePage() :\n                <SettingsPage  gameObj={this} inSettings={{...this.settings}}/>\n        );\n    }\n}\n\nexport {Game, EXACT, WRONG, NOTUSE, UNKNOWN, EXACTBIT, WRONGBIT, NOTUSEBIT, WILDCHAR};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from './Game.js';\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}