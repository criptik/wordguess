{"version":3,"sources":["HintHandler.js","SettingsPage.js","Game.js","index.js"],"names":["nbsp","String","fromCharCode","HintHandler","gameObj","TypeError","undefined","this","computeGuessCharColor","constructor","name","formatGuessTotals","comparePosMaps","newGuess","gidx","guessList","length","guessObj","oldPosMap","posMap","newPosMap","doCompare","guess","errMsg","bits","settings","hintUsePolicy","noMarkGuessChars","HintHandlerShowTotals","HintHandlerMarkChars","pos","chval","submitted","bgcolor","EXACT","greenString","WRONG","yellowString","greyString","notInPool","add","guessLine","newCode","oldCode","oldGuess","oldChr","policyIncludes","NOTUSEBIT","NOTUSE","WRONGBIT","len","genErrMsg","tstPosMap","basePosMap","every","val","index","type","borderRadius","height","width","display","marginLeft","marginBottom","textAlign","backgroundColor","countVals","exlen","wplen","forEach","push","style","styleForTotals","counts","Array","from","exact","wrong","yellowSpan","oldE","oldW","newE","newW","genCountSpans","tstE","tstW","baseE","baseW","SettingsPage","state","settingName","newval","setState","checked","onChange","updateSettings","props","id","float","labeltext","key","switchKey","fontSize","getSwitch","min","max","value","border","input","groupName","selectVal","text","isHorizontal","lineBreak","parseInt","event","target","groupHeaderText","optsArray","optsJsxArray","map","optset","genRadioSetting","marginRight","onClick","useGamePage","startNewGame","genRadioGroupSetting","genSwitchSetting","EXACTBIT","Component","Game","wordlen","guessMustBeWord","layoutName","letterMap","message","useVirtKeyboard","answer","focusRef","React","createRef","msg","duration","el","document","createElement","setAttribute","innerHTML","setTimeout","parentNode","removeChild","body","appendChild","Promise","resolve","a","current","focus","console","log","focusref","hintHandler","getHintHandler","buildWordList","possibleList","wordList","Math","floor","random","toUpperCase","gameOver","curAnswerLen","URL","fetch","data","split","word","base","gchars","bchars","fill","gchar","indexOf","slice","legalGuess","includes","setMessage","messageJsx","checkUseAllHints","filter","possibleListFilter","buildGameOverMessage","keyboard","clearInput","doInputSubmit","nativeEvent","substring","setInput","n","marginTop","keyboardRef","r","onKeyPress","onVirtKeyPress","bind","theme","layout","default","buttonTheme","class","buttons","numGuesses","html","msgButton","msgObj","buttonJsx","c","has","Set","guessLines","formatGuess","newObj","poolLine","getPoolChars","join","onKeyDown","onRealKeyDown","tabIndex","ref","div","genMessageLine","getVirtKeyboard","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.85e9da3f.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\nimport {EXACT, WRONG, NOTUSE, WRONGBIT, NOTUSEBIT} from './Game.js';\n\nconst nbsp = String.fromCharCode(160);\n\n// abstract class for the different ways of handling hints\nclass HintHandler {\n    constructor(gameObj) {\n        if (new.target === HintHandler) {\n            throw new TypeError('cannot instantiate HintHandler class');\n        }\n        // some methods must be overridden\n        if (this.computeGuessCharColor === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement computeGuessCharColor method`);\n        }\n        if (this.formatGuessTotals === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement formatGuessTotals method`);\n        }\n        if (this.comparePosMaps === undefined) {\n            throw new TypeError(`class ${this.constructor.name} did not implement comparePosMaps method`);\n        }\n        this.gameObj = gameObj;\n    }\n\n    static getHintHandler(gameObj) {\n        return (gameObj.settings.noMarkGuessChars ? new HintHandlerShowTotals(gameObj) : new HintHandlerMarkChars(gameObj));\n    }\n    \n    //framework for checking all hints\n    checkUseAllHints(newGuess) {\n        // for each previous guess, going backwards, see if our guess would produce a similar result\n        for (let gidx = this.gameObj.guessList.length-1; gidx >= 0; gidx--) {\n            const guessObj = this.gameObj.guessList[gidx];\n            const oldPosMap = guessObj.posMap;\n            // get compare info for that guess vs. our new guess\n            const newPosMap = this.gameObj.doCompare(guessObj.guess, newGuess);\n            const errMsg = this.comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj);\n            if (errMsg !== null) return errMsg;\n        }\n        return null; // if we got this far\n    }\n\n    policyIncludes(bits) {\n        // console.log('policyIncludes', this.gameObj.settings.hintUsePolicy, bits);\n        return ((this.gameObj.settings.hintUsePolicy & bits) !== 0)\n    }\n}\n\n// class for handling hints by marking chars\nclass HintHandlerMarkChars extends HintHandler{\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        let bgcolor = 'white'; // default\n        if (guessObj.posMap[pos] === EXACT) {\n            bgcolor = 'lightgreen';\n            this.gameObj.greenString += ` ${chval}`;\n        }\n        else if (guessObj.posMap[pos] === WRONG) {\n            bgcolor = 'yellow';\n            this.gameObj.yellowString += ` ${chval}`;\n        }\n        else if (submitted) {\n            this.gameObj.greyString += ` ${chval}`;\n            this.gameObj.notInPool.add(chval);\n        }\n        return bgcolor;\n    }\n\n    // in this handler, we don't show anything at end of line\n    formatGuessTotals(guessObj, guessLine) {\n    }\n\n    genErrMsg(newCode, oldCode, pos, newGuess, oldGuess) {\n        const oldChr = oldGuess[pos];\n        // we know policy at least includes EXACT\n        if (oldCode === EXACT) return `chr ${pos+1} must be ${oldChr}, `;\n        if (this.policyIncludes(NOTUSEBIT) && oldCode === NOTUSE) {\n            return `must not use ${oldChr}, `;\n        }\n        if (this.policyIncludes(WRONGBIT)&& oldCode === WRONG){\n            if (newCode === EXACT) return `chr ${pos+1} must not be ${oldChr}, `;\n            if (newCode === NOTUSE) return `must contain ${oldChr}, `;\n        }\n        return '';\n    }\n\n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        // console.log(`${guessObj.guess}, ${newPosMap}, ${oldPosMap}`);\n        const len = newGuess.length;\n        let errMsg = '';\n        for (let pos=0; pos<len; pos++) {\n            const newCode = newPosMap[pos];\n            const oldCode = oldPosMap[pos];\n            if (newCode !== oldCode) {\n                // errMsg += `chr ${pos+1} ${newCode} !== ${oldCode}, `;\n                errMsg += this.genErrMsg(newCode, oldCode, pos, newGuess, guessObj.guess);\n            }\n        }\n        if (errMsg.length > 0) errMsg += `see ${guessObj.guess}`;\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        return tstPosMap.every((val, index) => val === basePosMap[index]);\n    }\n}\n\n// class for handling hints by just showing totals (harder)\nclass HintHandlerShowTotals extends HintHandler{\n    // when we are not marking guess chars, we only know notInPool\n    // which is the special case when no green or yellow\n    computeGuessCharColor(guessObj, pos, chval, submitted) {\n        const bgcolor = 'white';\n        if (submitted && (guessObj.posMap.every(val => val === NOTUSE))) {\n            this.gameObj.notInPool.add(chval);\n        }\n        return bgcolor;\n    }\n\n    styleForTotals(type) {\n        return {\n            borderRadius: '50%',\n            height: '20px',\n            width: '20px',\n            display: 'inline-block',\n            marginLeft: '10px',\n            marginBottom: '5px',\n            textAlign: 'center',\n            backgroundColor: (type === EXACT ? 'lightgreen' : 'yellow'),\n        };\n    }\n    \n    // in this handler we do show totals at end of guess line\n    formatGuessTotals(guessObj, guessLine) {\n        const [exlen, wplen] = this.countVals(guessObj.posMap);\n        [EXACT, WRONG].forEach(type => {\n            const chval = (type===EXACT ? exlen : wplen);\n            guessLine.push(\n                <div style={this.styleForTotals(type)} >\n                  {chval}\n                </div>\n            );\n        });\n    }\n    \n    countVals(posMap) {\n        let counts = Array.from([0, 0, 0]);\n        posMap.forEach(val => counts[val-1]++);\n        return counts;\n    }\n\n    genCountSpans(exact, wrong) {\n        const yellowSpan = (!this.policyIncludes(WRONGBIT) ? '' : (\n              <span style={this.styleForTotals(WRONG)}>\n                {wrong}\n              </span>\n        ));            \n        return (\n            <Fragment>\n              <span style={this.styleForTotals(EXACT)}>\n                {exact}\n              </span>\n              {yellowSpan}\n            </Fragment>\n        );\n    }\n    \n    comparePosMaps(oldPosMap, newPosMap, newGuess, guessObj) {\n        const [oldE, oldW] = this.countVals(oldPosMap);\n        const [newE, newW] = this.countVals(newPosMap);\n        let errMsg = null;\n        if (oldE !== newE || (this.policyIncludes(WRONGBIT) && oldW !== newW)) {\n            // console.log(this.gameObj.settings.hintUsePolicy, oldE, oldW, newE, newW);\n            errMsg = (\n                <Fragment>\n                  {`from ${guessObj.guess}, need `}\n                  {this.genCountSpans(oldE, oldW)}\n                  {`,${nbsp}${nbsp}not `}\n                  {this.genCountSpans(newE, newW)}\n                </Fragment>\n            );\n        }\n        return errMsg;\n    }\n\n    possibleListFilter(tstPosMap, basePosMap) {\n        const [tstE, tstW] = this.countVals(tstPosMap);\n        const [baseE, baseW] = this.countVals(basePosMap);\n        return (tstE === baseE && tstW === baseW);\n    }\n    \n}\n\nexport {HintHandler};\n\n","import React, { Component, Fragment } from \"react\";\nimport NumericInput from \"react-numeric-input\";\nimport {EXACTBIT, WRONGBIT, NOTUSEBIT} from './Game.js';\nconst nbsp = String.fromCharCode(160);\n\nclass SettingsPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            settings : {},\n        };\n    }\n    \n    updateSettings(settingName, newval) {\n        // update the settings (which is shared between Game and us\n        // and set the state so we re-render\n        this.settings[settingName] = newval;\n        this.setState({settings: this.settings});\n    }\n    \n    getSwitch(settingName) {\n        if (true) return (\n            <input\n              type=\"checkbox\"\n              checked={this.settings[settingName]}\n              onChange= {() => this.updateSettings(settingName, !this.props.gameObj.settings[settingName])}\n              id={settingName}\n              height={15}\n              width={30}\n              style={{float: 'left'}}\n            />\n        )\n    }\n    \n    // <div align='right' style={{display:'inline-block', textAlign:'right'}}>\n    genSwitchSetting(settingName, labeltext) {\n        return (\n            <div key={this.switchKey++} style={{float: 'left', width:'300px'}}>\n            <span style={{fontSize:'14px'}} >{`${labeltext}${nbsp}${nbsp}`} </span>\n              <div style={{float: 'right'}} >\n                {this.getSwitch(settingName)}\n              </div>\n              <br/>\n            </div>\n        );\n    \n    }\n\n    genNumericInputSetting(settingName, labeltext) {\n        return (\n            <div style={{float: 'left', width:'320px'}}>\n              <span style={{fontSize:'14px'}} >\n                {labeltext}\n              </span>\n              <div style={{float:'right'}}>\n                <NumericInput\n                  id={settingName}\n                  min={5}\n                  max={8}\n                  value={this.settings[settingName] || \"\"} \n                  onChange={(val) => this.updateSettings(settingName, val)}\n                  style = {{\n                      border: '1px solid black',\n                      input: {\n                          marginLeft: '5px',\n                          height: '18px',\n                          width: '40px',\n                      },\n                  }}\n                >\n                </NumericInput>\n              </div>\n            </div>\n        );\n    } \n\n    genRadioSetting(groupName, selectVal, text, index, isHorizontal) {\n        // console.log('genRadioSetting', groupName, selectVal, text, isHorizontal);\n        const lineBreak = (isHorizontal ? '' : <br/>);\n        return (\n            <Fragment>\n              <input\n                type=\"radio\"\n                value={parseInt(selectVal)}\n                name={groupName}\n                key={index}\n                checked={this.settings[groupName] === parseInt(selectVal)}\n                style = {{marginLeft: '15px'}}\n                onChange={(event) => {\n                    const name = event.target.name;\n                    const val = parseInt(event.target.value);\n                    this.updateSettings(name, val);\n                    // console.log('onChange for Radio', name, val, this.settings, event);\n                }}\n              />\n              {text}\n              {lineBreak}\n            </Fragment>\n        );\n    }\n\n    genRadioGroupSetting(groupName, groupHeaderText, optsArray, isHorizontal=false) {\n        // generate the radio options section\n        // optsArray is a set of text, val pairs\n        const optsJsxArray = optsArray.map((optset, index) => {\n            const [text, val] = optset;\n            return this.genRadioSetting(groupName, val, text, index, isHorizontal);\n        });\n        return (\n            <Fragment>\n              {groupHeaderText}\n              <br/>\n              <div\n                value = {this.settings[groupName]}\n              >\n                {optsJsxArray}\n              </div>\n            </Fragment>\n        );\n    }\n\n    render() {\n        this.gameObj = this.props.gameObj;\n        this.settings = this.gameObj.settings;  // shares the Game settings\n\n        return (\n            // first is button to return to game\n            <div>\n              <button\n                style = {{\n                    marginRight: '10px',\n                    marginBottom: '5px',\n                }}\n                onClick = {() => {\n                    this.gameObj.setState({useGamePage:true});\n                    this.gameObj.startNewGame();\n                }}\n                \n              >\n                {String.fromCharCode(0x2b05)}\n              </button>\n              Settings\n              <br/>\n              <div style={{width:'300px', display:'inline-block', fontSize:'14px'}}>\n                {this.genRadioGroupSetting('wordlen', 'Word Length (longer=harder)', [\n                    ['5', 5], ['6', 6], ['7', 7], ['8', 8],\n                ], true)}\n                <br/>\n                {this.genSwitchSetting('guessMustBeWord', 'Guess must be word? (harder)') }\n                {this.genSwitchSetting('noMarkGuessChars', 'Not Mark Guess Chars? (much harder)') }\n                {this.genRadioGroupSetting('hintUsePolicy', 'Hint Reuse Requirements', [\n                    ['None (most flexible)', 0],\n                    ['Must Reuse Green (slightly harder)', EXACTBIT],\n                    ['Must Reuse Green and Yellow (harder)', EXACTBIT+WRONGBIT],\n                    ['Must Reuse All Hints (hardest and annoying)', EXACTBIT+WRONGBIT+NOTUSEBIT]\n                ])}\n              </div>\n            </div>\n        );\n    }\n}\n\nexport {SettingsPage};\n","import React, { Component, Fragment } from \"react\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {HintHandler} from './HintHandler.js';\nimport {SettingsPage} from './SettingsPage.js';\n\n// import * as _ from 'underscore';\nimport \"./index.css\";\n\nconst nbsp = String.fromCharCode(160);\nconst [EXACT, WRONG, NOTUSE] = [1,2,3];\nconst [EXACTBIT, WRONGBIT, NOTUSEBIT] = [2,4,8];\n\n\nclass Game extends Component {\n    constructor() {\n        super();\n        this.settings = {\n            wordlen: 5,\n            guessMustBeWord : true,\n            noMarkGuessChars : false,            \n            hintUsePolicy : EXACTBIT,\n        };\n        this.state = {\n            layoutName: \"default\",\n            input: \"\",\n            letterMap: {},\n            guessList: [],\n            useGamePage : true,\n            settings: this.settings,\n            message: null,\n        };\n        this.useVirtKeyboard = false;\n        this.answer = '';\n        this.focusRef = React.createRef();\n    }\n\n    tempAlert(msg,duration,bgcolor='red') {\n        // console.log(msg);\n        var el = document.createElement(\"div\");\n        el.setAttribute(\"style\", `position:absolute;\\\n                             top:0%; left:10%; \\\n                             background-color:${bgcolor}; \\\n                             border-color:black; \\\n                             border-width:1px; \\\n                             `);\n        el.innerHTML = msg;\n        setTimeout(function(){\n            el.parentNode.removeChild(el);\n        },duration);\n        document.body.appendChild(el);\n        return new Promise(resolve => setTimeout(resolve,duration));\n    }\n    \n    async componentDidMount() {\n        this.startNewGame();\n        if (this.focusRef && this.focusRef.current) {\n            this.focusRef.focus();\n        }\n    }\n    \n    componentDidUpdate() {\n        if (this.focusRef && this.focusRef.current) {\n            console.log('did update', this.focusref);\n            this.focusRef.focus();\n        }\n    }\n\n    async startNewGame() {\n        this.guessList = [];\n        this.input = '';\n        this.switchKey = 0;\n        // this.notInPool = new Set();\n        this.hintHandler = HintHandler.getHintHandler(this);\n        await this.buildWordList(this.settings.wordlen);\n        this.possibleList = Array.from(this.wordList);\n        this.answer = this.wordList[Math.floor(Math.random() * this.wordList.length)].toUpperCase();\n        // this.answer = 'FORDS';\n        console.log('this.answer =', this.answer);\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n            gameOver: false,\n            message: null,\n        });\n        if (this.focusRef.current) {\n            this.focusRef.focus();\n        }\n    }\n    \n    async buildWordList(wordlen) {\n        if (wordlen === this.curAnswerLen) return;\n        this.curAnswerLen = wordlen;\n        const URL = `./ospd${wordlen}.txt`;\n        const data = await fetch(URL);\n        console.log('fetch complete');\n        const text = await data.text();\n        // console.log('data.text() complete');\n        // console.log(text);\n        this.wordList = await text.split('\\n');\n        this.wordList = await this.wordList.map(word => word.toUpperCase());\n        console.log(`wordlist for len ${wordlen} built`);\n    }\n\n    doCompare(guess, base) {\n        let gchars = [...guess];\n        let bchars = [...base];\n        let posMap = new Array(this.settings.wordlen).fill(NOTUSE);\n        // first do exact matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar === bchars[index]) {\n                bchars[index] = null;\n                gchars[index] = null;\n                posMap[index] = EXACT;\n            }\n        });\n        // then do any more matches\n        gchars.forEach( (gchar, index) => {\n            if (gchar !== null) {\n                const pos = bchars.indexOf(gchar);\n                if (pos >= 0) {\n                    bchars[pos] = null;\n                    posMap[index] = WRONG;\n                }\n            }\n        });\n        return posMap;\n    }\n\n    mostRecentGuess() {\n        return (this.guessList.length > 0 ? this.guessList.slice(-1)[0] : null);\n    }\n    \n    \n    async doInputSubmit() {\n        let legalGuess = true;  // assume this\n        if (this.input.length !== this.answer.length) return;\n        // console.log('usedHintsObj', usedHintsObj);\n        if (this.settings.guessMustBeWord && !this.wordList.includes(this.input)) {\n            // await this.tempAlert('Guess must be a Legal Scrabble Word', 1500);\n            this.setMessage('Guess must be a Legal Scrabble Word');\n            legalGuess = false;\n        }\n        else if (this.settings.hintUsePolicy !== 0 && this.guessList.length > 0) {\n            const messageJsx = this.hintHandler.checkUseAllHints(this.input);\n            if (messageJsx) {\n                // console.log('messageJsx', messageJsx);\n                this.setMessage(messageJsx, 'rgb(230,230,230)');\n                legalGuess = false;\n            }\n        }\n        if (legalGuess) {    \n            // guess is legal, see how right it is\n            const posMap = this.doCompare(this.input, this.answer);\n            this.guessList.push({\n                guess: this.input,\n                index : this.guessList.length,\n                posMap,\n            });\n            const basePosMap = posMap;\n            this.possibleList = this.possibleList.filter(word => {\n                const tstPosMap = this.doCompare(this.input, word);\n                const ok = this.hintHandler.possibleListFilter(tstPosMap, basePosMap);\n                // if (ok) console.log(word, tstPosMap, basePosMap);\n                return ok;\n            });\n            // console.log(this.possibleList);\n            \n            if (posMap.every(val => val === EXACT)) {\n                this.setState(\n                    {gameOver:true,\n                     message: this.buildGameOverMessage(),\n                    });\n            }\n        }\n        // clean up input for the next time thru\n        if (legalGuess) {\n            this.input = '';\n            if (this.useVirtKeyboard) this.keyboard.clearInput();\n        }\n        this.setState({\n            input: this.input,\n            guessList: this.guessList,\n        });\n    }\n    \n    onVirtKeyPress(key) {\n        // console.log(\"Virt Key pressed\", key);\n        if (key === '{enter}') {\n            this.doInputSubmit();\n        }\n    }\n\n    onRealKeyDown(event) {\n        if (this.state.gameOver) return;\n        let key = event.nativeEvent.key;\n        if (key === 'Backspace' && this.state.message != null) {\n            this.setState({message: null});\n        }\n        // console.log(\"Real Key Down\", key);\n        if (key === 'Enter') {\n            this.doInputSubmit();\n        }\n        else if (key === 'Backspace' && this.input.length > 0) {\n            this.input = this.input.slice(0, -1);\n            this.setState({ input: this.input });\n        }\n        else {\n            key = key.toUpperCase();\n            if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.includes(key)) {\n                this.input += key;\n                if (this.input.length > this.answer.length) {\n                    this.input = this.input.substring(0, this.answer.length);\n                }\n                this.setState({ input: this.input });\n            }\n        }\n    }\n    \n    onChange(input) {\n        if (input.length > this.answer.length) {\n            input = input.substring(0, this.answer.length);\n            this.keyboard.setInput(input);        }\n        this.input = input;\n        this.setState({ input });\n        // console.log(\"Input changed\", input);\n    }\n\n    formatGuess(guessObj, submitted=false) {\n        let guessLine = [];\n        const guess = guessObj.guess;\n        for (let n=0; n < this.answer.length; n++) {\n            const chval = (n < guess.length ? guess[n] : nbsp);\n            // console.log('guessObj', guessObj);\n            const bgcolor = this.hintHandler.computeGuessCharColor(guessObj, n, chval, submitted);\n            guessLine.push(\n                <div key={n} style={{\n                    border: '1px solid black',\n                    backgroundColor: bgcolor,\n                    height: '20px',\n                    width: '20px',\n                    display: 'inline-block',\n                    marginLeft: '5px',\n                    marginBottom: '5px',\n                    marginTop: '5px',\n                    textAlign: 'center',\n                    // fontSize: '16px',\n                }}>\n                  {chval}\n                </div>\n            );\n        };\n        \n        // conditionally  show total exact and wrongplace\n        if (submitted) {\n            this.hintHandler.formatGuessTotals(guessObj, guessLine);\n        }\n        return guessLine;\n    }\n\n    getVirtKeyboard() {\n        if (!this.useVirtKeyboard) return <Fragment></Fragment>;\n        return (\n            <Keyboard\n              keyboardRef={r => (this.keyboard = r)}\n              onKeyPress = {this.onVirtKeyPress.bind(this)}\n              onChange = {this.onChange.bind(this)}\n              theme={\"hg-theme-default hg-layout-default myTheme\"}\n              layoutName={this.state.layoutName}\n              layout={{\n                  default: [\n                      \"Q W E R T Y U I O P\",\n                      'A S D F G H J K L',\n                      \"Z X C V B N M {bksp} {enter}\",\n                  ]\n              }}\n              buttonTheme={[\n                  {\n                      class: \"hg-yellow\",\n                      buttons: this.yellowString,\n                  },\n                  {\n                      class: \"hg-green\",\n                      buttons: this.greenString,\n                  },\n                  {\n                      class: \"hg-grey\",\n                      buttons: this.greyString,\n                  }\n                  \n              ]}\n              display={{\n                  '{enter}' : 'enter',\n                  '{bksp}' : '<<',\n              }}\n            />\n        );\n    }\n\n    buildGameOverMessage() {\n        const numGuesses = this.state.guessList.length;\n        const html = `Match after ${numGuesses} ${numGuesses === 1 ? 'guess' : 'guesses'}!`;\n        const againButton = (\n              <button\n                onClick = {this.startNewGame.bind(this)}\n                style = {{\n                    marginLeft: '5px',\n                }}\n              >\n                Again\n              </button>\n        );\n\n        return {html: html,\n                bgcolor: 'white',\n                msgButton: againButton,\n               };\n    }\n    \n    setMessage(html, bgcolor='pink', msgButton = null) {\n        const msgObj = {html, bgcolor, msgButton};\n        // console.log('setMessage', msgObj);\n        this.setState({\n            message: msgObj,\n        });\n    }\n    \n    genMessageLine() {\n        // console.log('state.message', this.state.message);\n        if (this.state.message === null) return (<Fragment></Fragment>);\n        const buttonJsx = (this.state.message.msgButton === null ?\n                           (<Fragment></Fragment>) :\n                           this.state.message.msgButton);\n        return(\n            <div style={{backgroundColor : this.state.message.bgcolor}} >\n               {<>{this.state.message.html}</>} \n              {buttonJsx}\n            </div>\n        );\n\n                         \n            \n    }\n\n    getPoolChars() {\n        return [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].filter((c) => !this.notInPool.has(c));\n    }\n    \n    render() {\n        // console.log('render', this.state.message, this.focusRef);\n        this.yellowString = ' ';\n        this.greenString = ' ';\n        this.greyString = ' ';\n        this.notInPool = new Set();\n        let guessLines = [];\n        this.state.guessList.forEach( (guessObj) => {\n            guessLines.push(this.formatGuess(guessObj, true));\n            guessLines.push(<br/>);\n        });\n        // if game not over, push inputty line as well\n        if (!this.state.gameOver) {\n            const newObj = {\n                guess: this.state.input,\n                posMap: new Array(this.settings.wordlen).fill(NOTUSE),\n            };\n            guessLines.push(this.formatGuess(newObj, false));\n        }\n        const poolLine = (this.state.guessList.length === 0 ? ' ' :\n                             `Pool: ${this.getPoolChars().join(' ')}`);\n\n        const gamePage = () => {\n            return (\n                <Fragment>\n                  <div>\n                    <button\n                      style = {{\n                          marginRight: '10px',\n                      }}\n                      onClick = {() => this.setState({useGamePage:false})}\n                    >\n                      {String.fromCharCode(0x2699)}\n                    </button>\n                    {`WordGuess Game,   ${this.possibleList ? this.possibleList.length : 0} Possible`}\n                  </div>\n                <div\n                  onKeyDown = {this.onRealKeyDown.bind(this)}\n                  tabIndex = {0}\n                  ref = {div => this.focusRef = div}\n                >\n                  {guessLines}\n                  {this.genMessageLine()}\n                </div>\n                {poolLine}\n                {this.getVirtKeyboard()}\n                </Fragment>\n            );\n        }\n\n        return (\n            this.state.useGamePage ? gamePage() : <SettingsPage  gameObj={this}/>\n        );\n    }\n}\n\nexport {Game, EXACT, WRONG, NOTUSE, EXACTBIT, WRONGBIT, NOTUSEBIT};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from './Game.js';\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}